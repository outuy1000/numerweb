{"ast":null,"code":"import { indexOf } from \"./utils\";\n/**\n * @class Autolinker.HtmlTag\n * @extends Object\n *\n * Represents an HTML tag, which can be used to easily build/modify HTML tags programmatically.\n *\n * Autolinker uses this abstraction to create HTML tags, and then write them out as strings. You may also use\n * this class in your code, especially within a {@link Autolinker#replaceFn replaceFn}.\n *\n * ## Examples\n *\n * Example instantiation:\n *\n *     var tag = new Autolinker.HtmlTag( {\n *         tagName : 'a',\n *         attrs   : { 'href': 'http://google.com', 'class': 'external-link' },\n *         innerHtml : 'Google'\n *     } );\n *\n *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n *\n *     // Individual accessor methods\n *     tag.getTagName();                 // 'a'\n *     tag.getAttr( 'href' );            // 'http://google.com'\n *     tag.hasClass( 'external-link' );  // true\n *\n *\n * Using mutator methods (which may be used in combination with instantiation config properties):\n *\n *     var tag = new Autolinker.HtmlTag();\n *     tag.setTagName( 'a' );\n *     tag.setAttr( 'href', 'http://google.com' );\n *     tag.addClass( 'external-link' );\n *     tag.setInnerHtml( 'Google' );\n *\n *     tag.getTagName();                 // 'a'\n *     tag.getAttr( 'href' );            // 'http://google.com'\n *     tag.hasClass( 'external-link' );  // true\n *\n *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n *\n *\n * ## Example use within a {@link Autolinker#replaceFn replaceFn}\n *\n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( match ) {\n *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance, configured with the Match's href and anchor text\n *             tag.setAttr( 'rel', 'nofollow' );\n *\n *             return tag;\n *         }\n *     } );\n *\n *     // generated html:\n *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n *\n *\n * ## Example use with a new tag for the replacement\n *\n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( match ) {\n *             var tag = new Autolinker.HtmlTag( {\n *                 tagName : 'button',\n *                 attrs   : { 'title': 'Load URL: ' + match.getAnchorHref() },\n *                 innerHtml : 'Load URL: ' + match.getAnchorText()\n *             } );\n *\n *             return tag;\n *         }\n *     } );\n *\n *     // generated html:\n *     //   Test <button title=\"Load URL: http://google.com\">Load URL: google.com</button>\n */\n\nvar HtmlTag =\n/** @class */\nfunction () {\n  /**\n   * @method constructor\n   * @param {Object} [cfg] The configuration properties for this class, in an Object (map)\n   */\n  function HtmlTag(cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n    /**\n     * @cfg {String} tagName\n     *\n     * The tag name. Ex: 'a', 'button', etc.\n     *\n     * Not required at instantiation time, but should be set using {@link #setTagName} before {@link #toAnchorString}\n     * is executed.\n     */\n\n\n    this.tagName = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Object.<String, String>} attrs\n     *\n     * An key/value Object (map) of attributes to create the tag with. The keys are the attribute names, and the\n     * values are the attribute values.\n     */\n\n    this.attrs = {}; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {String} innerHTML\n     *\n     * The inner HTML for the tag.\n     */\n\n    this.innerHTML = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @protected\n     * @property {RegExp} whitespaceRegex\n     *\n     * Regular expression used to match whitespace in a string of CSS classes.\n     */\n\n    this.whitespaceRegex = /\\s+/; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    this.tagName = cfg.tagName || '';\n    this.attrs = cfg.attrs || {};\n    this.innerHTML = cfg.innerHtml || cfg.innerHTML || ''; // accept either the camelCased form or the fully capitalized acronym as in the DOM\n  }\n  /**\n   * Sets the tag name that will be used to generate the tag with.\n   *\n   * @param {String} tagName\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n\n\n  HtmlTag.prototype.setTagName = function (tagName) {\n    this.tagName = tagName;\n    return this;\n  };\n  /**\n   * Retrieves the tag name.\n   *\n   * @return {String}\n   */\n\n\n  HtmlTag.prototype.getTagName = function () {\n    return this.tagName || '';\n  };\n  /**\n   * Sets an attribute on the HtmlTag.\n   *\n   * @param {String} attrName The attribute name to set.\n   * @param {String} attrValue The attribute value to set.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n\n\n  HtmlTag.prototype.setAttr = function (attrName, attrValue) {\n    var tagAttrs = this.getAttrs();\n    tagAttrs[attrName] = attrValue;\n    return this;\n  };\n  /**\n   * Retrieves an attribute from the HtmlTag. If the attribute does not exist, returns `undefined`.\n   *\n   * @param {String} attrName The attribute name to retrieve.\n   * @return {String} The attribute's value, or `undefined` if it does not exist on the HtmlTag.\n   */\n\n\n  HtmlTag.prototype.getAttr = function (attrName) {\n    return this.getAttrs()[attrName];\n  };\n  /**\n   * Sets one or more attributes on the HtmlTag.\n   *\n   * @param {Object.<String, String>} attrs A key/value Object (map) of the attributes to set.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n\n\n  HtmlTag.prototype.setAttrs = function (attrs) {\n    Object.assign(this.getAttrs(), attrs);\n    return this;\n  };\n  /**\n   * Retrieves the attributes Object (map) for the HtmlTag.\n   *\n   * @return {Object.<String, String>} A key/value object of the attributes for the HtmlTag.\n   */\n\n\n  HtmlTag.prototype.getAttrs = function () {\n    return this.attrs || (this.attrs = {});\n  };\n  /**\n   * Sets the provided `cssClass`, overwriting any current CSS classes on the HtmlTag.\n   *\n   * @param {String} cssClass One or more space-separated CSS classes to set (overwrite).\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n\n\n  HtmlTag.prototype.setClass = function (cssClass) {\n    return this.setAttr('class', cssClass);\n  };\n  /**\n   * Convenience method to add one or more CSS classes to the HtmlTag. Will not add duplicate CSS classes.\n   *\n   * @param {String} cssClass One or more space-separated CSS classes to add.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n\n\n  HtmlTag.prototype.addClass = function (cssClass) {\n    var classAttr = this.getClass(),\n        whitespaceRegex = this.whitespaceRegex,\n        classes = !classAttr ? [] : classAttr.split(whitespaceRegex),\n        newClasses = cssClass.split(whitespaceRegex),\n        newClass;\n\n    while (newClass = newClasses.shift()) {\n      if (indexOf(classes, newClass) === -1) {\n        classes.push(newClass);\n      }\n    }\n\n    this.getAttrs()['class'] = classes.join(\" \");\n    return this;\n  };\n  /**\n   * Convenience method to remove one or more CSS classes from the HtmlTag.\n   *\n   * @param {String} cssClass One or more space-separated CSS classes to remove.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n\n\n  HtmlTag.prototype.removeClass = function (cssClass) {\n    var classAttr = this.getClass(),\n        whitespaceRegex = this.whitespaceRegex,\n        classes = !classAttr ? [] : classAttr.split(whitespaceRegex),\n        removeClasses = cssClass.split(whitespaceRegex),\n        removeClass;\n\n    while (classes.length && (removeClass = removeClasses.shift())) {\n      var idx = indexOf(classes, removeClass);\n\n      if (idx !== -1) {\n        classes.splice(idx, 1);\n      }\n    }\n\n    this.getAttrs()['class'] = classes.join(\" \");\n    return this;\n  };\n  /**\n   * Convenience method to retrieve the CSS class(es) for the HtmlTag, which will each be separated by spaces when\n   * there are multiple.\n   *\n   * @return {String}\n   */\n\n\n  HtmlTag.prototype.getClass = function () {\n    return this.getAttrs()['class'] || \"\";\n  };\n  /**\n   * Convenience method to check if the tag has a CSS class or not.\n   *\n   * @param {String} cssClass The CSS class to check for.\n   * @return {Boolean} `true` if the HtmlTag has the CSS class, `false` otherwise.\n   */\n\n\n  HtmlTag.prototype.hasClass = function (cssClass) {\n    return (' ' + this.getClass() + ' ').indexOf(' ' + cssClass + ' ') !== -1;\n  };\n  /**\n   * Sets the inner HTML for the tag.\n   *\n   * @param {String} html The inner HTML to set.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n\n\n  HtmlTag.prototype.setInnerHTML = function (html) {\n    this.innerHTML = html;\n    return this;\n  };\n  /**\n   * Backwards compatibility method name.\n   *\n   * @param {String} html The inner HTML to set.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n\n\n  HtmlTag.prototype.setInnerHtml = function (html) {\n    return this.setInnerHTML(html);\n  };\n  /**\n   * Retrieves the inner HTML for the tag.\n   *\n   * @return {String}\n   */\n\n\n  HtmlTag.prototype.getInnerHTML = function () {\n    return this.innerHTML || \"\";\n  };\n  /**\n   * Backward compatibility method name.\n   *\n   * @return {String}\n   */\n\n\n  HtmlTag.prototype.getInnerHtml = function () {\n    return this.getInnerHTML();\n  };\n  /**\n   * Override of superclass method used to generate the HTML string for the tag.\n   *\n   * @return {String}\n   */\n\n\n  HtmlTag.prototype.toAnchorString = function () {\n    var tagName = this.getTagName(),\n        attrsStr = this.buildAttrsStr();\n    attrsStr = attrsStr ? ' ' + attrsStr : ''; // prepend a space if there are actually attributes\n\n    return ['<', tagName, attrsStr, '>', this.getInnerHtml(), '</', tagName, '>'].join(\"\");\n  };\n  /**\n   * Support method for {@link #toAnchorString}, returns the string space-separated key=\"value\" pairs, used to populate\n   * the stringified HtmlTag.\n   *\n   * @protected\n   * @return {String} Example return: `attr1=\"value1\" attr2=\"value2\"`\n   */\n\n\n  HtmlTag.prototype.buildAttrsStr = function () {\n    if (!this.attrs) return \"\"; // no `attrs` Object (map) has been set, return empty string\n\n    var attrs = this.getAttrs(),\n        attrsArr = [];\n\n    for (var prop in attrs) {\n      if (attrs.hasOwnProperty(prop)) {\n        attrsArr.push(prop + '=\"' + attrs[prop] + '\"');\n      }\n    }\n\n    return attrsArr.join(\" \");\n  };\n\n  return HtmlTag;\n}();\n\nexport { HtmlTag };","map":{"version":3,"sources":["../src/html-tag.ts"],"names":[],"mappings":"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","sourcesContent":["import { indexOf } from \"./utils\";\n\n/**\n * @class Autolinker.HtmlTag\n * @extends Object\n *\n * Represents an HTML tag, which can be used to easily build/modify HTML tags programmatically.\n *\n * Autolinker uses this abstraction to create HTML tags, and then write them out as strings. You may also use\n * this class in your code, especially within a {@link Autolinker#replaceFn replaceFn}.\n *\n * ## Examples\n *\n * Example instantiation:\n *\n *     var tag = new Autolinker.HtmlTag( {\n *         tagName : 'a',\n *         attrs   : { 'href': 'http://google.com', 'class': 'external-link' },\n *         innerHtml : 'Google'\n *     } );\n *\n *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n *\n *     // Individual accessor methods\n *     tag.getTagName();                 // 'a'\n *     tag.getAttr( 'href' );            // 'http://google.com'\n *     tag.hasClass( 'external-link' );  // true\n *\n *\n * Using mutator methods (which may be used in combination with instantiation config properties):\n *\n *     var tag = new Autolinker.HtmlTag();\n *     tag.setTagName( 'a' );\n *     tag.setAttr( 'href', 'http://google.com' );\n *     tag.addClass( 'external-link' );\n *     tag.setInnerHtml( 'Google' );\n *\n *     tag.getTagName();                 // 'a'\n *     tag.getAttr( 'href' );            // 'http://google.com'\n *     tag.hasClass( 'external-link' );  // true\n *\n *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n *\n *\n * ## Example use within a {@link Autolinker#replaceFn replaceFn}\n *\n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( match ) {\n *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance, configured with the Match's href and anchor text\n *             tag.setAttr( 'rel', 'nofollow' );\n *\n *             return tag;\n *         }\n *     } );\n *\n *     // generated html:\n *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n *\n *\n * ## Example use with a new tag for the replacement\n *\n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( match ) {\n *             var tag = new Autolinker.HtmlTag( {\n *                 tagName : 'button',\n *                 attrs   : { 'title': 'Load URL: ' + match.getAnchorHref() },\n *                 innerHtml : 'Load URL: ' + match.getAnchorText()\n *             } );\n *\n *             return tag;\n *         }\n *     } );\n *\n *     // generated html:\n *     //   Test <button title=\"Load URL: http://google.com\">Load URL: google.com</button>\n */\nexport class HtmlTag {\n\n\t/**\n\t * @cfg {String} tagName\n\t *\n\t * The tag name. Ex: 'a', 'button', etc.\n\t *\n\t * Not required at instantiation time, but should be set using {@link #setTagName} before {@link #toAnchorString}\n\t * is executed.\n\t */\n\tprivate tagName: string = '';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Object.<String, String>} attrs\n\t *\n\t * An key/value Object (map) of attributes to create the tag with. The keys are the attribute names, and the\n\t * values are the attribute values.\n\t */\n\tprivate attrs: { [key: string]: string } = {};  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {String} innerHTML\n\t *\n\t * The inner HTML for the tag.\n\t */\n\tprivate innerHTML: string = '';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @protected\n\t * @property {RegExp} whitespaceRegex\n\t *\n\t * Regular expression used to match whitespace in a string of CSS classes.\n\t */\n\tprotected whitespaceRegex = /\\s+/;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\n\t/**\n\t * @method constructor\n\t * @param {Object} [cfg] The configuration properties for this class, in an Object (map)\n\t */\n\tconstructor( cfg: HtmlTagCfg = {} ) {\n\t\tthis.tagName = cfg.tagName || '';\n\t\tthis.attrs = cfg.attrs || {};\n\t\tthis.innerHTML = cfg.innerHtml || cfg.innerHTML || '';  // accept either the camelCased form or the fully capitalized acronym as in the DOM\n\t}\n\n\n\t/**\n\t * Sets the tag name that will be used to generate the tag with.\n\t *\n\t * @param {String} tagName\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetTagName( tagName: string ) {\n\t\tthis.tagName = tagName;\n\t\treturn this;\n\t}\n\n\n\t/**\n\t * Retrieves the tag name.\n\t *\n\t * @return {String}\n\t */\n\tgetTagName() {\n\t\treturn this.tagName || '';\n\t}\n\n\n\t/**\n\t * Sets an attribute on the HtmlTag.\n\t *\n\t * @param {String} attrName The attribute name to set.\n\t * @param {String} attrValue The attribute value to set.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetAttr( attrName: string, attrValue: string ) {\n\t\tlet tagAttrs = this.getAttrs();\n\t\ttagAttrs[ attrName ] = attrValue;\n\n\t\treturn this;\n\t}\n\n\n\t/**\n\t * Retrieves an attribute from the HtmlTag. If the attribute does not exist, returns `undefined`.\n\t *\n\t * @param {String} attrName The attribute name to retrieve.\n\t * @return {String} The attribute's value, or `undefined` if it does not exist on the HtmlTag.\n\t */\n\tgetAttr( attrName: string ) {\n\t\treturn this.getAttrs()[ attrName ];\n\t}\n\n\n\t/**\n\t * Sets one or more attributes on the HtmlTag.\n\t *\n\t * @param {Object.<String, String>} attrs A key/value Object (map) of the attributes to set.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetAttrs( attrs: {[attr: string]: string} ) {\n\t\tObject.assign( this.getAttrs(), attrs );\n\n\t\treturn this;\n\t}\n\n\n\t/**\n\t * Retrieves the attributes Object (map) for the HtmlTag.\n\t *\n\t * @return {Object.<String, String>} A key/value object of the attributes for the HtmlTag.\n\t */\n\tgetAttrs() {\n\t\treturn this.attrs || ( this.attrs = {} );\n\t}\n\n\n\t/**\n\t * Sets the provided `cssClass`, overwriting any current CSS classes on the HtmlTag.\n\t *\n\t * @param {String} cssClass One or more space-separated CSS classes to set (overwrite).\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetClass( cssClass: string ) {\n\t\treturn this.setAttr( 'class', cssClass );\n\t}\n\n\n\t/**\n\t * Convenience method to add one or more CSS classes to the HtmlTag. Will not add duplicate CSS classes.\n\t *\n\t * @param {String} cssClass One or more space-separated CSS classes to add.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\taddClass( cssClass: string ) {\n\t\tlet classAttr = this.getClass(),\n\t\t    whitespaceRegex = this.whitespaceRegex,\n\t\t    classes = ( !classAttr ) ? [] : classAttr.split( whitespaceRegex ),\n\t\t    newClasses = cssClass.split( whitespaceRegex ),\n\t\t    newClass: string | undefined;\n\n\t\twhile( newClass = newClasses.shift() ) {\n\t\t\tif( indexOf( classes, newClass ) === -1 ) {\n\t\t\t\tclasses.push( newClass );\n\t\t\t}\n\t\t}\n\n\t\tthis.getAttrs()[ 'class' ] = classes.join( \" \" );\n\t\treturn this;\n\t}\n\n\n\t/**\n\t * Convenience method to remove one or more CSS classes from the HtmlTag.\n\t *\n\t * @param {String} cssClass One or more space-separated CSS classes to remove.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tremoveClass( cssClass: string ) {\n\t\tlet classAttr = this.getClass(),\n\t\t    whitespaceRegex = this.whitespaceRegex,\n\t\t    classes = ( !classAttr ) ? [] : classAttr.split( whitespaceRegex ),\n\t\t    removeClasses = cssClass.split( whitespaceRegex ),\n\t\t    removeClass: string | undefined;\n\n\t\twhile( classes.length && ( removeClass = removeClasses.shift() ) ) {\n\t\t\tlet idx = indexOf( classes, removeClass );\n\t\t\tif( idx !== -1 ) {\n\t\t\t\tclasses.splice( idx, 1 );\n\t\t\t}\n\t\t}\n\n\t\tthis.getAttrs()[ 'class' ] = classes.join( \" \" );\n\t\treturn this;\n\t}\n\n\n\t/**\n\t * Convenience method to retrieve the CSS class(es) for the HtmlTag, which will each be separated by spaces when\n\t * there are multiple.\n\t *\n\t * @return {String}\n\t */\n\tgetClass() {\n\t\treturn this.getAttrs()[ 'class' ] || \"\";\n\t}\n\n\n\t/**\n\t * Convenience method to check if the tag has a CSS class or not.\n\t *\n\t * @param {String} cssClass The CSS class to check for.\n\t * @return {Boolean} `true` if the HtmlTag has the CSS class, `false` otherwise.\n\t */\n\thasClass( cssClass: string ) {\n\t\treturn ( ' ' + this.getClass() + ' ' ).indexOf( ' ' + cssClass + ' ' ) !== -1;\n\t}\n\n\n\t/**\n\t * Sets the inner HTML for the tag.\n\t *\n\t * @param {String} html The inner HTML to set.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetInnerHTML( html: string ) {\n\t\tthis.innerHTML = html;\n\n\t\treturn this;\n\t}\n\n\n\t/**\n\t * Backwards compatibility method name.\n\t *\n\t * @param {String} html The inner HTML to set.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetInnerHtml( html: string ) {\n\t\treturn this.setInnerHTML( html );\n\t}\n\n\n\t/**\n\t * Retrieves the inner HTML for the tag.\n\t *\n\t * @return {String}\n\t */\n\tgetInnerHTML() {\n\t\treturn this.innerHTML || \"\";\n\t}\n\n\n\t/**\n\t * Backward compatibility method name.\n\t *\n\t * @return {String}\n\t */\n\tgetInnerHtml() {\n\t\treturn this.getInnerHTML();\n\t}\n\n\n\t/**\n\t * Override of superclass method used to generate the HTML string for the tag.\n\t *\n\t * @return {String}\n\t */\n\ttoAnchorString() {\n\t\tlet tagName = this.getTagName(),\n\t\t    attrsStr = this.buildAttrsStr();\n\n\t\tattrsStr = ( attrsStr ) ? ' ' + attrsStr : '';  // prepend a space if there are actually attributes\n\n\t\treturn [ '<', tagName, attrsStr, '>', this.getInnerHtml(), '</', tagName, '>' ].join( \"\" );\n\t}\n\n\n\t/**\n\t * Support method for {@link #toAnchorString}, returns the string space-separated key=\"value\" pairs, used to populate\n\t * the stringified HtmlTag.\n\t *\n\t * @protected\n\t * @return {String} Example return: `attr1=\"value1\" attr2=\"value2\"`\n\t */\n\tprotected buildAttrsStr() {\n\t\tif( !this.attrs ) return \"\";  // no `attrs` Object (map) has been set, return empty string\n\n\t\tlet attrs = this.getAttrs(),\n\t\t    attrsArr: string[] = [];\n\n\t\tfor( let prop in attrs ) {\n\t\t\tif( attrs.hasOwnProperty( prop ) ) {\n\t\t\t\tattrsArr.push( prop + '=\"' + attrs[ prop ] + '\"' );\n\t\t\t}\n\t\t}\n\t\treturn attrsArr.join( \" \" );\n\t}\n\n}\n\n\nexport interface HtmlTagCfg {\n\ttagName?: string;\n\tattrs?: { [key: string]: string };\n\tinnerHtml?: string;\n\tinnerHTML?: string;\n}"]},"metadata":{},"sourceType":"module"}