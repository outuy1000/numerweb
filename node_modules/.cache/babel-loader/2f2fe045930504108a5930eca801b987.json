{"ast":null,"code":"import { alphaCharsStr } from \"../regex-lib\";\n/**\n * @private\n * @class Autolinker.matcher.UrlMatchValidator\n * @singleton\n *\n * Used by Autolinker to filter out false URL positives from the\n * {@link Autolinker.matcher.Url UrlMatcher}.\n *\n * Due to the limitations of regular expressions (including the missing feature\n * of look-behinds in JS regular expressions), we cannot always determine the\n * validity of a given match. This class applies a bit of additional logic to\n * filter out any false positives that have been matched by the\n * {@link Autolinker.matcher.Url UrlMatcher}.\n */\n\nvar UrlMatchValidator =\n/** @class */\nfunction () {\n  function UrlMatchValidator() {}\n  /**\n   * Determines if a given URL match found by the {@link Autolinker.matcher.Url UrlMatcher}\n   * is valid. Will return `false` for:\n   *\n   * 1) URL matches which do not have at least have one period ('.') in the\n   *    domain name (effectively skipping over matches like \"abc:def\").\n   *    However, URL matches with a protocol will be allowed (ex: 'http://localhost')\n   * 2) URL matches which do not have at least one word character in the\n   *    domain name (effectively skipping over matches like \"git:1.0\").\n   *    However, URL matches with a protocol will be allowed (ex: 'intra-net://271219.76')\n   * 3) A protocol-relative url match (a URL beginning with '//') whose\n   *    previous character is a word character (effectively skipping over\n   *    strings like \"abc//google.com\")\n   *\n   * Otherwise, returns `true`.\n   *\n   * @param {String} urlMatch The matched URL, if there was one. Will be an\n   *   empty string if the match is not a URL match.\n   * @param {String} protocolUrlMatch The match URL string for a protocol\n   *   match. Ex: 'http://yahoo.com'. This is used to match something like\n   *   'http://localhost', where we won't double check that the domain name\n   *   has at least one '.' in it.\n   * @return {Boolean} `true` if the match given is valid and should be\n   *   processed, or `false` if the match is invalid and/or should just not be\n   *   processed.\n   */\n\n\n  UrlMatchValidator.isValid = function (urlMatch, protocolUrlMatch) {\n    if (protocolUrlMatch && !this.isValidUriScheme(protocolUrlMatch) || this.urlMatchDoesNotHaveProtocolOrDot(urlMatch, protocolUrlMatch) || // At least one period ('.') must exist in the URL match for us to consider it an actual URL, *unless* it was a full protocol match (like 'http://localhost')\n    this.urlMatchDoesNotHaveAtLeastOneWordChar(urlMatch, protocolUrlMatch) && // At least one letter character must exist in the domain name after a protocol match. Ex: skip over something like \"git:1.0\"\n    !this.isValidIpAddress(urlMatch) || // Except if it's an IP address\n    this.containsMultipleDots(urlMatch)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  UrlMatchValidator.isValidIpAddress = function (uriSchemeMatch) {\n    var newRegex = new RegExp(this.hasFullProtocolRegex.source + this.ipRegex.source);\n    var uriScheme = uriSchemeMatch.match(newRegex);\n    return uriScheme !== null;\n  };\n\n  UrlMatchValidator.containsMultipleDots = function (urlMatch) {\n    var stringBeforeSlash = urlMatch;\n\n    if (this.hasFullProtocolRegex.test(urlMatch)) {\n      stringBeforeSlash = urlMatch.split('://')[1];\n    }\n\n    return stringBeforeSlash.split('/')[0].indexOf(\"..\") > -1;\n  };\n  /**\n   * Determines if the URI scheme is a valid scheme to be autolinked. Returns\n   * `false` if the scheme is 'javascript:' or 'vbscript:'\n   *\n   * @private\n   * @param {String} uriSchemeMatch The match URL string for a full URI scheme\n   *   match. Ex: 'http://yahoo.com' or 'mailto:a@a.com'.\n   * @return {Boolean} `true` if the scheme is a valid one, `false` otherwise.\n   */\n\n\n  UrlMatchValidator.isValidUriScheme = function (uriSchemeMatch) {\n    var uriSchemeMatchArr = uriSchemeMatch.match(this.uriSchemeRegex),\n        uriScheme = uriSchemeMatchArr && uriSchemeMatchArr[0].toLowerCase();\n    return uriScheme !== 'javascript:' && uriScheme !== 'vbscript:';\n  };\n  /**\n   * Determines if a URL match does not have either:\n   *\n   * a) a full protocol (i.e. 'http://'), or\n   * b) at least one dot ('.') in the domain name (for a non-full-protocol\n   *    match).\n   *\n   * Either situation is considered an invalid URL (ex: 'git:d' does not have\n   * either the '://' part, or at least one dot in the domain name. If the\n   * match was 'git:abc.com', we would consider this valid.)\n   *\n   * @private\n   * @param {String} urlMatch The matched URL, if there was one. Will be an\n   *   empty string if the match is not a URL match.\n   * @param {String} protocolUrlMatch The match URL string for a protocol\n   *   match. Ex: 'http://yahoo.com'. This is used to match something like\n   *   'http://localhost', where we won't double check that the domain name\n   *   has at least one '.' in it.\n   * @return {Boolean} `true` if the URL match does not have a full protocol,\n   *   or at least one dot ('.') in a non-full-protocol match.\n   */\n\n\n  UrlMatchValidator.urlMatchDoesNotHaveProtocolOrDot = function (urlMatch, protocolUrlMatch) {\n    return !!urlMatch && (!protocolUrlMatch || !this.hasFullProtocolRegex.test(protocolUrlMatch)) && urlMatch.indexOf('.') === -1;\n  };\n  /**\n   * Determines if a URL match does not have either:\n   *\n   * a) a full protocol (i.e. 'http://'), or\n   * b) at least one word character after the protocol (i.e. in the domain name)\n   *\n   * At least one letter character must exist in the domain name after a\n   * protocol match. Ex: skip over something like \"git:1.0\"\n   *\n   * @private\n   * @param {String} urlMatch The matched URL, if there was one. Will be an\n   *   empty string if the match is not a URL match.\n   * @param {String} protocolUrlMatch The match URL string for a protocol\n   *   match. Ex: 'http://yahoo.com'. This is used to know whether or not we\n   *   have a protocol in the URL string, in order to check for a word\n   *   character after the protocol separator (':').\n   * @return {Boolean} `true` if the URL match does not have a full protocol, or\n   * at least one word character in it, `false` otherwise.\n   */\n\n\n  UrlMatchValidator.urlMatchDoesNotHaveAtLeastOneWordChar = function (urlMatch, protocolUrlMatch) {\n    if (urlMatch && protocolUrlMatch) {\n      return !this.hasFullProtocolRegex.test(protocolUrlMatch) && !this.hasWordCharAfterProtocolRegex.test(urlMatch);\n    } else {\n      return false;\n    }\n  };\n  /**\n   * Regex to test for a full protocol, with the two trailing slashes. Ex: 'http://'\n   *\n   * @private\n   * @property {RegExp} hasFullProtocolRegex\n   */\n\n\n  UrlMatchValidator.hasFullProtocolRegex = /^[A-Za-z][-.+A-Za-z0-9]*:\\/\\//;\n  /**\n   * Regex to find the URI scheme, such as 'mailto:'.\n   *\n   * This is used to filter out 'javascript:' and 'vbscript:' schemes.\n   *\n   * @private\n   * @property {RegExp} uriSchemeRegex\n   */\n\n  UrlMatchValidator.uriSchemeRegex = /^[A-Za-z][-.+A-Za-z0-9]*:/;\n  /**\n   * Regex to determine if at least one word char exists after the protocol (i.e. after the ':')\n   *\n   * @private\n   * @property {RegExp} hasWordCharAfterProtocolRegex\n   */\n\n  UrlMatchValidator.hasWordCharAfterProtocolRegex = new RegExp(\":[^\\\\s]*?[\" + alphaCharsStr + \"]\");\n  /**\n   * Regex to determine if the string is a valid IP address\n   *\n   * @private\n   * @property {RegExp} ipRegex\n   */\n\n  UrlMatchValidator.ipRegex = /[0-9][0-9]?[0-9]?\\.[0-9][0-9]?[0-9]?\\.[0-9][0-9]?[0-9]?\\.[0-9][0-9]?[0-9]?(:[0-9]*)?\\/?$/;\n  return UrlMatchValidator;\n}();\n\nexport { UrlMatchValidator };","map":{"version":3,"sources":["../src/matcher/url-match-validator.ts"],"names":[],"mappings":"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","sourcesContent":["import { alphaCharsStr } from \"../regex-lib\";\n\n/**\n * @private\n * @class Autolinker.matcher.UrlMatchValidator\n * @singleton\n *\n * Used by Autolinker to filter out false URL positives from the\n * {@link Autolinker.matcher.Url UrlMatcher}.\n *\n * Due to the limitations of regular expressions (including the missing feature\n * of look-behinds in JS regular expressions), we cannot always determine the\n * validity of a given match. This class applies a bit of additional logic to\n * filter out any false positives that have been matched by the\n * {@link Autolinker.matcher.Url UrlMatcher}.\n */\nexport class UrlMatchValidator {\n\n\t/**\n\t * Regex to test for a full protocol, with the two trailing slashes. Ex: 'http://'\n\t *\n\t * @private\n\t * @property {RegExp} hasFullProtocolRegex\n\t */\n\tstatic hasFullProtocolRegex = /^[A-Za-z][-.+A-Za-z0-9]*:\\/\\//;\n\n\t/**\n\t * Regex to find the URI scheme, such as 'mailto:'.\n\t *\n\t * This is used to filter out 'javascript:' and 'vbscript:' schemes.\n\t *\n\t * @private\n\t * @property {RegExp} uriSchemeRegex\n\t */\n\tstatic uriSchemeRegex = /^[A-Za-z][-.+A-Za-z0-9]*:/;\n\n\t/**\n\t * Regex to determine if at least one word char exists after the protocol (i.e. after the ':')\n\t *\n\t * @private\n\t * @property {RegExp} hasWordCharAfterProtocolRegex\n\t */\n\tstatic hasWordCharAfterProtocolRegex = new RegExp(\":[^\\\\s]*?[\" + alphaCharsStr + \"]\");\n\n\t/**\n\t * Regex to determine if the string is a valid IP address\n\t *\n\t * @private\n\t * @property {RegExp} ipRegex\n\t */\n\tstatic ipRegex = /[0-9][0-9]?[0-9]?\\.[0-9][0-9]?[0-9]?\\.[0-9][0-9]?[0-9]?\\.[0-9][0-9]?[0-9]?(:[0-9]*)?\\/?$/;\n\n\t/**\n\t * Determines if a given URL match found by the {@link Autolinker.matcher.Url UrlMatcher}\n\t * is valid. Will return `false` for:\n\t *\n\t * 1) URL matches which do not have at least have one period ('.') in the\n\t *    domain name (effectively skipping over matches like \"abc:def\").\n\t *    However, URL matches with a protocol will be allowed (ex: 'http://localhost')\n\t * 2) URL matches which do not have at least one word character in the\n\t *    domain name (effectively skipping over matches like \"git:1.0\").\n\t *    However, URL matches with a protocol will be allowed (ex: 'intra-net://271219.76')\n\t * 3) A protocol-relative url match (a URL beginning with '//') whose\n\t *    previous character is a word character (effectively skipping over\n\t *    strings like \"abc//google.com\")\n\t *\n\t * Otherwise, returns `true`.\n\t *\n\t * @param {String} urlMatch The matched URL, if there was one. Will be an\n\t *   empty string if the match is not a URL match.\n\t * @param {String} protocolUrlMatch The match URL string for a protocol\n\t *   match. Ex: 'http://yahoo.com'. This is used to match something like\n\t *   'http://localhost', where we won't double check that the domain name\n\t *   has at least one '.' in it.\n\t * @return {Boolean} `true` if the match given is valid and should be\n\t *   processed, or `false` if the match is invalid and/or should just not be\n\t *   processed.\n\t */\n\tstatic isValid( urlMatch: string, protocolUrlMatch: string ) {\n\t\tif(\n\t\t\t( protocolUrlMatch && !this.isValidUriScheme( protocolUrlMatch ) ) ||\n\t\t\tthis.urlMatchDoesNotHaveProtocolOrDot( urlMatch, protocolUrlMatch ) ||    // At least one period ('.') must exist in the URL match for us to consider it an actual URL, *unless* it was a full protocol match (like 'http://localhost')\n\t\t\t(this.urlMatchDoesNotHaveAtLeastOneWordChar( urlMatch, protocolUrlMatch ) && // At least one letter character must exist in the domain name after a protocol match. Ex: skip over something like \"git:1.0\"\n\t\t\t   !this.isValidIpAddress( urlMatch )) || // Except if it's an IP address\n\t\t\tthis.containsMultipleDots( urlMatch )\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\n\tstatic isValidIpAddress( uriSchemeMatch: string ) {\n\t\tlet newRegex = new RegExp( this.hasFullProtocolRegex.source + this.ipRegex.source );\n\t\tlet uriScheme = uriSchemeMatch.match( newRegex );\n\n\t\treturn uriScheme !== null;\n\t}\n\n\tprivate static containsMultipleDots( urlMatch: string ) {\n\t\tvar stringBeforeSlash = urlMatch;\n\t\tif (this.hasFullProtocolRegex.test(urlMatch)) {\n\t\t\tstringBeforeSlash = urlMatch.split('://')[1];\n\t\t}\n\t\treturn stringBeforeSlash.split('/')[0].indexOf(\"..\") > -1;\n\t}\n\n\t/**\n\t * Determines if the URI scheme is a valid scheme to be autolinked. Returns\n\t * `false` if the scheme is 'javascript:' or 'vbscript:'\n\t *\n\t * @private\n\t * @param {String} uriSchemeMatch The match URL string for a full URI scheme\n\t *   match. Ex: 'http://yahoo.com' or 'mailto:a@a.com'.\n\t * @return {Boolean} `true` if the scheme is a valid one, `false` otherwise.\n\t */\n\tstatic isValidUriScheme( uriSchemeMatch: string ) {\n\t\tlet uriSchemeMatchArr = uriSchemeMatch.match( this.uriSchemeRegex ),\n\t\t    uriScheme = uriSchemeMatchArr && uriSchemeMatchArr[ 0 ].toLowerCase();\n\n\t\treturn ( uriScheme !== 'javascript:' && uriScheme !== 'vbscript:' );\n\t}\n\n\n\t/**\n\t * Determines if a URL match does not have either:\n\t *\n\t * a) a full protocol (i.e. 'http://'), or\n\t * b) at least one dot ('.') in the domain name (for a non-full-protocol\n\t *    match).\n\t *\n\t * Either situation is considered an invalid URL (ex: 'git:d' does not have\n\t * either the '://' part, or at least one dot in the domain name. If the\n\t * match was 'git:abc.com', we would consider this valid.)\n\t *\n\t * @private\n\t * @param {String} urlMatch The matched URL, if there was one. Will be an\n\t *   empty string if the match is not a URL match.\n\t * @param {String} protocolUrlMatch The match URL string for a protocol\n\t *   match. Ex: 'http://yahoo.com'. This is used to match something like\n\t *   'http://localhost', where we won't double check that the domain name\n\t *   has at least one '.' in it.\n\t * @return {Boolean} `true` if the URL match does not have a full protocol,\n\t *   or at least one dot ('.') in a non-full-protocol match.\n\t */\n\tstatic urlMatchDoesNotHaveProtocolOrDot( urlMatch: string, protocolUrlMatch: string ) {\n\t\treturn ( !!urlMatch && ( !protocolUrlMatch || !this.hasFullProtocolRegex.test( protocolUrlMatch ) ) && urlMatch.indexOf( '.' ) === -1 );\n\t}\n\n\n\t/**\n\t * Determines if a URL match does not have either:\n\t *\n\t * a) a full protocol (i.e. 'http://'), or\n\t * b) at least one word character after the protocol (i.e. in the domain name)\n\t *\n\t * At least one letter character must exist in the domain name after a\n\t * protocol match. Ex: skip over something like \"git:1.0\"\n\t *\n\t * @private\n\t * @param {String} urlMatch The matched URL, if there was one. Will be an\n\t *   empty string if the match is not a URL match.\n\t * @param {String} protocolUrlMatch The match URL string for a protocol\n\t *   match. Ex: 'http://yahoo.com'. This is used to know whether or not we\n\t *   have a protocol in the URL string, in order to check for a word\n\t *   character after the protocol separator (':').\n\t * @return {Boolean} `true` if the URL match does not have a full protocol, or\n\t * at least one word character in it, `false` otherwise.\n\t */\n\tstatic urlMatchDoesNotHaveAtLeastOneWordChar( urlMatch: string, protocolUrlMatch: string ) {\n\t\tif( urlMatch && protocolUrlMatch ) {\n\t\t\treturn !this.hasFullProtocolRegex.test( protocolUrlMatch ) && !this.hasWordCharAfterProtocolRegex.test( urlMatch );\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}