{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Match } from \"./match\";\n/**\n * @class Autolinker.match.Hashtag\n * @extends Autolinker.match.Match\n *\n * Represents a Hashtag match found in an input string which should be\n * Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more\n * details.\n */\n\nvar HashtagMatch =\n/** @class */\nfunction (_super) {\n  __extends(HashtagMatch, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n\n\n  function HashtagMatch(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @cfg {String} serviceName\n     *\n     * The service to point hashtag matches to. See {@link Autolinker#hashtag}\n     * for available values.\n     */\n\n\n    _this.serviceName = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {String} hashtag (required)\n     *\n     * The HashtagMatch that was matched, without the '#'.\n     */\n\n    _this.hashtag = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    _this.serviceName = cfg.serviceName;\n    _this.hashtag = cfg.hashtag;\n    return _this;\n  }\n  /**\n   * Returns a string name for the type of match that this class represents.\n   * For the case of HashtagMatch, returns 'hashtag'.\n   *\n   * @return {String}\n   */\n\n\n  HashtagMatch.prototype.getType = function () {\n    return 'hashtag';\n  };\n  /**\n   * Returns the configured {@link #serviceName} to point the HashtagMatch to.\n   * Ex: 'facebook', 'twitter'.\n   *\n   * @return {String}\n   */\n\n\n  HashtagMatch.prototype.getServiceName = function () {\n    return this.serviceName;\n  };\n  /**\n   * Returns the matched hashtag, without the '#' character.\n   *\n   * @return {String}\n   */\n\n\n  HashtagMatch.prototype.getHashtag = function () {\n    return this.hashtag;\n  };\n  /**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @return {String}\n   */\n\n\n  HashtagMatch.prototype.getAnchorHref = function () {\n    var serviceName = this.serviceName,\n        hashtag = this.hashtag;\n\n    switch (serviceName) {\n      case 'twitter':\n        return 'https://twitter.com/hashtag/' + hashtag;\n\n      case 'facebook':\n        return 'https://www.facebook.com/hashtag/' + hashtag;\n\n      case 'instagram':\n        return 'https://instagram.com/explore/tags/' + hashtag;\n\n      default:\n        // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n        throw new Error('Unknown service name to point hashtag to: ' + serviceName);\n    }\n  };\n  /**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @return {String}\n   */\n\n\n  HashtagMatch.prototype.getAnchorText = function () {\n    return '#' + this.hashtag;\n  };\n\n  return HashtagMatch;\n}(Match);\n\nexport { HashtagMatch };","map":null,"metadata":{},"sourceType":"module"}