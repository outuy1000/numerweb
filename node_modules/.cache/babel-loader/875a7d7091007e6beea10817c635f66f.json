{"ast":null,"code":"/**\n * Zenscroll 4.0.2\n * https://github.com/zengabor/zenscroll/\n *\n * Copyright 2015–2018 Gabor Lenard\n *\n * This is free and unencumbered software released into the public domain.\n * \n * Anyone is free to copy, modify, publish, use, compile, sell, or\n * distribute this software, either in source code form or as a compiled\n * binary, for any purpose, commercial or non-commercial, and by any\n * means.\n * \n * In jurisdictions that recognize copyright laws, the author or authors\n * of this software dedicate any and all copyright interest in the\n * software to the public domain. We make this dedication for the benefit\n * of the public at large and to the detriment of our heirs and\n * successors. We intend this dedication to be an overt act of\n * relinquishment in perpetuity of all present and future rights to this\n * software under copyright law.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n * \n * For more information, please refer to <http://unlicense.org>\n * \n */\n\n/*jshint devel:true, asi:true */\n\n/*global define, module */\n(function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory());\n  } else if (typeof module === \"object\" && module.exports) {\n    module.exports = factory();\n  } else {\n    (function install() {\n      // To make sure Zenscroll can be referenced from the header, before `body` is available\n      if (document && document.body) {\n        root.zenscroll = factory();\n      } else {\n        // retry 9ms later\n        setTimeout(install, 9);\n      }\n    })();\n  }\n})(this, function () {\n  \"use strict\"; // Detect if the browser already supports native smooth scrolling (e.g., Firefox 36+ and Chrome 49+) and it is enabled:\n\n  var isNativeSmoothScrollEnabledOn = function isNativeSmoothScrollEnabledOn(elem) {\n    return elem && \"getComputedStyle\" in window && window.getComputedStyle(elem)[\"scroll-behavior\"] === \"smooth\";\n  }; // Exit if it’s not a browser environment:\n\n\n  if (typeof window === \"undefined\" || !(\"document\" in window)) {\n    return {};\n  }\n\n  var makeScroller = function makeScroller(container, defaultDuration, edgeOffset) {\n    // Use defaults if not provided\n    defaultDuration = defaultDuration || 999; //ms\n\n    if (!edgeOffset && edgeOffset !== 0) {\n      // When scrolling, this amount of distance is kept from the edges of the container:\n      edgeOffset = 9; //px\n    } // Handling the life-cycle of the scroller\n\n\n    var scrollTimeoutId;\n\n    var setScrollTimeoutId = function setScrollTimeoutId(newValue) {\n      scrollTimeoutId = newValue;\n    };\n    /**\n     * Stop the current smooth scroll operation immediately\n     */\n\n\n    var stopScroll = function stopScroll() {\n      clearTimeout(scrollTimeoutId);\n      setScrollTimeoutId(0);\n    };\n\n    var getTopWithEdgeOffset = function getTopWithEdgeOffset(elem) {\n      return Math.max(0, container.getTopOf(elem) - edgeOffset);\n    };\n    /**\n     * Scrolls to a specific vertical position in the document.\n     *\n     * @param {targetY} The vertical position within the document.\n     * @param {duration} Optionally the duration of the scroll operation.\n     *        If not provided the default duration is used.\n     * @param {onDone} An optional callback function to be invoked once the scroll finished.\n     */\n\n\n    var scrollToY = function scrollToY(targetY, duration, onDone) {\n      stopScroll();\n\n      if (duration === 0 || duration && duration < 0 || isNativeSmoothScrollEnabledOn(container.body)) {\n        container.toY(targetY);\n\n        if (onDone) {\n          onDone();\n        }\n      } else {\n        var startY = container.getY();\n        var distance = Math.max(0, targetY) - startY;\n        var startTime = new Date().getTime();\n        duration = duration || Math.min(Math.abs(distance), defaultDuration);\n\n        (function loopScroll() {\n          setScrollTimeoutId(setTimeout(function () {\n            // Calculate percentage:\n            var p = Math.min(1, (new Date().getTime() - startTime) / duration); // Calculate the absolute vertical position:\n\n            var y = Math.max(0, Math.floor(startY + distance * (p < 0.5 ? 2 * p * p : p * (4 - p * 2) - 1)));\n            container.toY(y);\n\n            if (p < 1 && container.getHeight() + y < container.body.scrollHeight) {\n              loopScroll();\n            } else {\n              setTimeout(stopScroll, 99); // with cooldown time\n\n              if (onDone) {\n                onDone();\n              }\n            }\n          }, 9));\n        })();\n      }\n    };\n    /**\n     * Scrolls to the top of a specific element.\n     *\n     * @param {elem} The element to scroll to.\n     * @param {duration} Optionally the duration of the scroll operation.\n     * @param {onDone} An optional callback function to be invoked once the scroll finished.\n     */\n\n\n    var scrollToElem = function scrollToElem(elem, duration, onDone) {\n      scrollToY(getTopWithEdgeOffset(elem), duration, onDone);\n    };\n    /**\n     * Scrolls an element into view if necessary.\n     *\n     * @param {elem} The element.\n     * @param {duration} Optionally the duration of the scroll operation.\n     * @param {onDone} An optional callback function to be invoked once the scroll finished.\n     */\n\n\n    var scrollIntoView = function scrollIntoView(elem, duration, onDone) {\n      var elemHeight = elem.getBoundingClientRect().height;\n      var elemBottom = container.getTopOf(elem) + elemHeight;\n      var containerHeight = container.getHeight();\n      var y = container.getY();\n      var containerBottom = y + containerHeight;\n\n      if (getTopWithEdgeOffset(elem) < y || elemHeight + edgeOffset > containerHeight) {\n        // Element is clipped at top or is higher than screen.\n        scrollToElem(elem, duration, onDone);\n      } else if (elemBottom + edgeOffset > containerBottom) {\n        // Element is clipped at the bottom.\n        scrollToY(elemBottom - containerHeight + edgeOffset, duration, onDone);\n      } else if (onDone) {\n        onDone();\n      }\n    };\n    /**\n     * Scrolls to the center of an element.\n     *\n     * @param {elem} The element.\n     * @param {duration} Optionally the duration of the scroll operation.\n     * @param {offset} Optionally the offset of the top of the element from the center of the screen.\n     *        A value of 0 is ignored.\n     * @param {onDone} An optional callback function to be invoked once the scroll finished.\n     */\n\n\n    var scrollToCenterOf = function scrollToCenterOf(elem, duration, offset, onDone) {\n      scrollToY(Math.max(0, container.getTopOf(elem) - container.getHeight() / 2 + (offset || elem.getBoundingClientRect().height / 2)), duration, onDone);\n    };\n    /**\n     * Changes default settings for this scroller.\n     *\n     * @param {newDefaultDuration} Optionally a new value for default duration, used for each scroll method by default.\n     *        Ignored if null or undefined.\n     * @param {newEdgeOffset} Optionally a new value for the edge offset, used by each scroll method by default. Ignored if null or undefined.\n     * @returns An object with the current values.\n     */\n\n\n    var setup = function setup(newDefaultDuration, newEdgeOffset) {\n      if (newDefaultDuration === 0 || newDefaultDuration) {\n        defaultDuration = newDefaultDuration;\n      }\n\n      if (newEdgeOffset === 0 || newEdgeOffset) {\n        edgeOffset = newEdgeOffset;\n      }\n\n      return {\n        defaultDuration: defaultDuration,\n        edgeOffset: edgeOffset\n      };\n    };\n\n    return {\n      setup: setup,\n      to: scrollToElem,\n      toY: scrollToY,\n      intoView: scrollIntoView,\n      center: scrollToCenterOf,\n      stop: stopScroll,\n      moving: function moving() {\n        return !!scrollTimeoutId;\n      },\n      getY: container.getY,\n      getTopOf: container.getTopOf\n    };\n  };\n\n  var docElem = document.documentElement;\n\n  var getDocY = function getDocY() {\n    return window.scrollY || docElem.scrollTop;\n  }; // Create a scroller for the document:\n\n\n  var zenscroll = makeScroller({\n    body: document.scrollingElement || document.body,\n    toY: function toY(y) {\n      window.scrollTo(0, y);\n    },\n    getY: getDocY,\n    getHeight: function getHeight() {\n      return window.innerHeight || docElem.clientHeight;\n    },\n    getTopOf: function getTopOf(elem) {\n      return elem.getBoundingClientRect().top + getDocY() - docElem.offsetTop;\n    }\n  });\n  /**\n   * Creates a scroller from the provided container element (e.g., a DIV)\n   *\n   * @param {scrollContainer} The vertical position within the document.\n   * @param {defaultDuration} Optionally a value for default duration, used for each scroll method by default.\n   *        Ignored if 0 or null or undefined.\n   * @param {edgeOffset} Optionally a value for the edge offset, used by each scroll method by default. \n   *        Ignored if null or undefined.\n   * @returns A scroller object, similar to `zenscroll` but controlling the provided element.\n   */\n\n  zenscroll.createScroller = function (scrollContainer, defaultDuration, edgeOffset) {\n    return makeScroller({\n      body: scrollContainer,\n      toY: function toY(y) {\n        scrollContainer.scrollTop = y;\n      },\n      getY: function getY() {\n        return scrollContainer.scrollTop;\n      },\n      getHeight: function getHeight() {\n        return Math.min(scrollContainer.clientHeight, window.innerHeight || docElem.clientHeight);\n      },\n      getTopOf: function getTopOf(elem) {\n        return elem.offsetTop;\n      }\n    }, defaultDuration, edgeOffset);\n  }; // Automatic link-smoothing on achors\n  // Exclude IE8- or when native is enabled or Zenscroll auto- is disabled\n\n\n  if (\"addEventListener\" in window && !window.noZensmooth && !isNativeSmoothScrollEnabledOn(document.body)) {\n    var isHistorySupported = \"history\" in window && \"pushState\" in history;\n    var isScrollRestorationSupported = isHistorySupported && \"scrollRestoration\" in history; // On first load & refresh make sure the browser restores the position first\n\n    if (isScrollRestorationSupported) {\n      history.scrollRestoration = \"auto\";\n    }\n\n    window.addEventListener(\"load\", function () {\n      if (isScrollRestorationSupported) {\n        // Set it to manual\n        setTimeout(function () {\n          history.scrollRestoration = \"manual\";\n        }, 9);\n        window.addEventListener(\"popstate\", function (event) {\n          if (event.state && \"zenscrollY\" in event.state) {\n            zenscroll.toY(event.state.zenscrollY);\n          }\n        }, false);\n      } // Add edge offset on first load if necessary\n      // This may not work on IE (or older computer?) as it requires more timeout, around 100 ms\n\n\n      if (window.location.hash) {\n        setTimeout(function () {\n          // Adjustment is only needed if there is an edge offset:\n          var edgeOffset = zenscroll.setup().edgeOffset;\n\n          if (edgeOffset) {\n            var targetElem = document.getElementById(window.location.href.split(\"#\")[1]);\n\n            if (targetElem) {\n              var targetY = Math.max(0, zenscroll.getTopOf(targetElem) - edgeOffset);\n              var diff = zenscroll.getY() - targetY; // Only do the adjustment if the browser is very close to the element:\n\n              if (0 <= diff && diff < 9) {\n                window.scrollTo(0, targetY);\n              }\n            }\n          }\n        }, 9);\n      }\n    }, false); // Handling clicks on anchors\n\n    var RE_noZensmooth = new RegExp(\"(^|\\\\s)noZensmooth(\\\\s|$)\");\n    window.addEventListener(\"click\", function (event) {\n      var anchor = event.target;\n\n      while (anchor && anchor.tagName !== \"A\") {\n        anchor = anchor.parentNode;\n      } // Let the browser handle the click if it wasn't with the primary button, or with some modifier keys:\n\n\n      if (!anchor || event.which !== 1 || event.shiftKey || event.metaKey || event.ctrlKey || event.altKey) {\n        return;\n      } // Save the current scrolling position so it can be used for scroll restoration:\n\n\n      if (isScrollRestorationSupported) {\n        var historyState = history.state && typeof history.state === \"object\" ? history.state : {};\n        historyState.zenscrollY = zenscroll.getY();\n\n        try {\n          history.replaceState(historyState, \"\");\n        } catch (e) {// Avoid the Chrome Security exception on file protocol, e.g., file://index.html\n        }\n      } // Find the referenced ID:\n\n\n      var href = anchor.getAttribute(\"href\") || \"\";\n\n      if (href.indexOf(\"#\") === 0 && !RE_noZensmooth.test(anchor.className)) {\n        var targetY = 0;\n        var targetElem = document.getElementById(href.substring(1));\n\n        if (href !== \"#\") {\n          if (!targetElem) {\n            // Let the browser handle the click if the target ID is not found.\n            return;\n          }\n\n          targetY = zenscroll.getTopOf(targetElem);\n        }\n\n        event.preventDefault(); // By default trigger the browser's `hashchange` event...\n\n        var onDone = function onDone() {\n          window.location = href;\n        }; // ...unless there is an edge offset specified\n\n\n        var edgeOffset = zenscroll.setup().edgeOffset;\n\n        if (edgeOffset) {\n          targetY = Math.max(0, targetY - edgeOffset);\n\n          if (isHistorySupported) {\n            onDone = function onDone() {\n              history.pushState({}, \"\", href);\n            };\n          }\n        }\n\n        zenscroll.toY(targetY, null, onDone);\n      }\n    }, false);\n  }\n\n  return zenscroll;\n});","map":null,"metadata":{},"sourceType":"script"}