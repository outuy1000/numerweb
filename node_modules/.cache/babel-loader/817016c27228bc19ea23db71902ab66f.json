{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Match } from \"./match\";\n/**\n * @class Autolinker.match.Url\n * @extends Autolinker.match.Match\n *\n * Represents a Url match found in an input string which should be Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\n\nvar UrlMatch =\n/** @class */\nfunction (_super) {\n  __extends(UrlMatch, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n\n\n  function UrlMatch(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @cfg {String} url (required)\n     *\n     * The url that was matched.\n     */\n\n\n    _this.url = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {\"scheme\"/\"www\"/\"tld\"} urlMatchType (required)\n     *\n     * The type of URL match that this class represents. This helps to determine\n     * if the match was made in the original text with a prefixed scheme (ex:\n     * 'http://www.google.com'), a prefixed 'www' (ex: 'www.google.com'), or\n     * was matched by a known top-level domain (ex: 'google.com').\n     */\n\n    _this.urlMatchType = 'scheme'; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} protocolUrlMatch (required)\n     *\n     * `true` if the URL is a match which already has a protocol (i.e.\n     * 'http://'), `false` if the match was from a 'www' or known TLD match.\n     */\n\n    _this.protocolUrlMatch = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} protocolRelativeMatch (required)\n     *\n     * `true` if the URL is a protocol-relative match. A protocol-relative match\n     * is a URL that starts with '//', and will be either http:// or https://\n     * based on the protocol that the site is loaded under.\n     */\n\n    _this.protocolRelativeMatch = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Object} stripPrefix (required)\n     *\n     * The Object form of {@link Autolinker#cfg-stripPrefix}.\n     */\n\n    _this.stripPrefix = {\n      scheme: true,\n      www: true\n    }; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} stripTrailingSlash (required)\n     * @inheritdoc Autolinker#cfg-stripTrailingSlash\n     */\n\n    _this.stripTrailingSlash = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} decodePercentEncoding (required)\n     * @inheritdoc Autolinker#cfg-decodePercentEncoding\n     */\n\n    _this.decodePercentEncoding = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @private\n     * @property {RegExp} schemePrefixRegex\n     *\n     * A regular expression used to remove the 'http://' or 'https://' from\n     * URLs.\n     */\n\n    _this.schemePrefixRegex = /^(https?:\\/\\/)?/i;\n    /**\n     * @private\n     * @property {RegExp} wwwPrefixRegex\n     *\n     * A regular expression used to remove the 'www.' from URLs.\n     */\n\n    _this.wwwPrefixRegex = /^(https?:\\/\\/)?(www\\.)?/i;\n    /**\n     * @private\n     * @property {RegExp} protocolRelativeRegex\n     *\n     * The regular expression used to remove the protocol-relative '//' from the {@link #url} string, for purposes\n     * of {@link #getAnchorText}. A protocol-relative URL is, for example, \"//yahoo.com\"\n     */\n\n    _this.protocolRelativeRegex = /^\\/\\//;\n    /**\n     * @private\n     * @property {Boolean} protocolPrepended\n     *\n     * Will be set to `true` if the 'http://' protocol has been prepended to the {@link #url} (because the\n     * {@link #url} did not have a protocol)\n     */\n\n    _this.protocolPrepended = false;\n    _this.urlMatchType = cfg.urlMatchType;\n    _this.url = cfg.url;\n    _this.protocolUrlMatch = cfg.protocolUrlMatch;\n    _this.protocolRelativeMatch = cfg.protocolRelativeMatch;\n    _this.stripPrefix = cfg.stripPrefix;\n    _this.stripTrailingSlash = cfg.stripTrailingSlash;\n    _this.decodePercentEncoding = cfg.decodePercentEncoding;\n    return _this;\n  }\n  /**\n   * Returns a string name for the type of match that this class represents.\n   * For the case of UrlMatch, returns 'url'.\n   *\n   * @return {String}\n   */\n\n\n  UrlMatch.prototype.getType = function () {\n    return 'url';\n  };\n  /**\n   * Returns a string name for the type of URL match that this class\n   * represents.\n   *\n   * This helps to determine if the match was made in the original text with a\n   * prefixed scheme (ex: 'http://www.google.com'), a prefixed 'www' (ex:\n   * 'www.google.com'), or was matched by a known top-level domain (ex:\n   * 'google.com').\n   *\n   * @return {\"scheme\"/\"www\"/\"tld\"}\n   */\n\n\n  UrlMatch.prototype.getUrlMatchType = function () {\n    return this.urlMatchType;\n  };\n  /**\n   * Returns the url that was matched, assuming the protocol to be 'http://' if the original\n   * match was missing a protocol.\n   *\n   * @return {String}\n   */\n\n\n  UrlMatch.prototype.getUrl = function () {\n    var url = this.url; // if the url string doesn't begin with a protocol, assume 'http://'\n\n    if (!this.protocolRelativeMatch && !this.protocolUrlMatch && !this.protocolPrepended) {\n      url = this.url = 'http://' + url;\n      this.protocolPrepended = true;\n    }\n\n    return url;\n  };\n  /**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @return {String}\n   */\n\n\n  UrlMatch.prototype.getAnchorHref = function () {\n    var url = this.getUrl();\n    return url.replace(/&amp;/g, '&'); // any &amp;'s in the URL should be converted back to '&' if they were displayed as &amp; in the source html\n  };\n  /**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @return {String}\n   */\n\n\n  UrlMatch.prototype.getAnchorText = function () {\n    var anchorText = this.getMatchedText();\n\n    if (this.protocolRelativeMatch) {\n      // Strip off any protocol-relative '//' from the anchor text\n      anchorText = this.stripProtocolRelativePrefix(anchorText);\n    }\n\n    if (this.stripPrefix.scheme) {\n      anchorText = this.stripSchemePrefix(anchorText);\n    }\n\n    if (this.stripPrefix.www) {\n      anchorText = this.stripWwwPrefix(anchorText);\n    }\n\n    if (this.stripTrailingSlash) {\n      anchorText = this.removeTrailingSlash(anchorText); // remove trailing slash, if there is one\n    }\n\n    if (this.decodePercentEncoding) {\n      anchorText = this.removePercentEncoding(anchorText);\n    }\n\n    return anchorText;\n  }; // ---------------------------------------\n  // Utility Functionality\n\n  /**\n   * Strips the scheme prefix (such as \"http://\" or \"https://\") from the given\n   * `url`.\n   *\n   * @private\n   * @param {String} url The text of the anchor that is being generated, for\n   *   which to strip off the url scheme.\n   * @return {String} The `url`, with the scheme stripped.\n   */\n\n\n  UrlMatch.prototype.stripSchemePrefix = function (url) {\n    return url.replace(this.schemePrefixRegex, '');\n  };\n  /**\n   * Strips the 'www' prefix from the given `url`.\n   *\n   * @private\n   * @param {String} url The text of the anchor that is being generated, for\n   *   which to strip off the 'www' if it exists.\n   * @return {String} The `url`, with the 'www' stripped.\n   */\n\n\n  UrlMatch.prototype.stripWwwPrefix = function (url) {\n    return url.replace(this.wwwPrefixRegex, '$1'); // leave any scheme ($1), it one exists\n  };\n  /**\n   * Strips any protocol-relative '//' from the anchor text.\n   *\n   * @private\n   * @param {String} text The text of the anchor that is being generated, for which to strip off the\n   *   protocol-relative prefix (such as stripping off \"//\")\n   * @return {String} The `anchorText`, with the protocol-relative prefix stripped.\n   */\n\n\n  UrlMatch.prototype.stripProtocolRelativePrefix = function (text) {\n    return text.replace(this.protocolRelativeRegex, '');\n  };\n  /**\n   * Removes any trailing slash from the given `anchorText`, in preparation for the text to be displayed.\n   *\n   * @private\n   * @param {String} anchorText The text of the anchor that is being generated, for which to remove any trailing\n   *   slash ('/') that may exist.\n   * @return {String} The `anchorText`, with the trailing slash removed.\n   */\n\n\n  UrlMatch.prototype.removeTrailingSlash = function (anchorText) {\n    if (anchorText.charAt(anchorText.length - 1) === '/') {\n      anchorText = anchorText.slice(0, -1);\n    }\n\n    return anchorText;\n  };\n  /**\n   * Decodes percent-encoded characters from the given `anchorText`, in\n   * preparation for the text to be displayed.\n   *\n   * @private\n   * @param {String} anchorText The text of the anchor that is being\n   *   generated, for which to decode any percent-encoded characters.\n   * @return {String} The `anchorText`, with the percent-encoded characters\n   *   decoded.\n   */\n\n\n  UrlMatch.prototype.removePercentEncoding = function (anchorText) {\n    // First, convert a few of the known % encodings to the corresponding\n    // HTML entities that could accidentally be interpretted as special\n    // HTML characters\n    var preProcessedEntityAnchorText = anchorText.replace(/%22/gi, '&quot;') // \" char\n    .replace(/%26/gi, '&amp;') // & char\n    .replace(/%27/gi, '&#39;') // ' char\n    .replace(/%3C/gi, '&lt;') // < char\n    .replace(/%3E/gi, '&gt;'); // > char\n\n    try {\n      // Now attempt to decode the rest of the anchor text\n      return decodeURIComponent(preProcessedEntityAnchorText);\n    } catch (e) {\n      // Invalid % escape sequence in the anchor text\n      return preProcessedEntityAnchorText;\n    }\n  };\n\n  return UrlMatch;\n}(Match);\n\nexport { UrlMatch };","map":null,"metadata":{},"sourceType":"module"}