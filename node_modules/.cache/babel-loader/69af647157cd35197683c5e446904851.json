{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Match } from \"./match\";\n/**\n * @class Autolinker.match.Phone\n * @extends Autolinker.match.Match\n *\n * Represents a Phone number match found in an input string which should be\n * Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more\n * details.\n */\n\nvar PhoneMatch =\n/** @class */\nfunction (_super) {\n  __extends(PhoneMatch, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n\n\n  function PhoneMatch(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @protected\n     * @property {String} number (required)\n     *\n     * The phone number that was matched, without any delimiter characters.\n     *\n     * Note: This is a string to allow for prefixed 0's.\n     */\n\n\n    _this.number = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @protected\n     * @property  {Boolean} plusSign (required)\n     *\n     * `true` if the matched phone number started with a '+' sign. We'll include\n     * it in the `tel:` URL if so, as this is needed for international numbers.\n     *\n     * Ex: '+1 (123) 456 7879'\n     */\n\n    _this.plusSign = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    _this.number = cfg.number;\n    _this.plusSign = cfg.plusSign;\n    return _this;\n  }\n  /**\n   * Returns a string name for the type of match that this class represents.\n   * For the case of PhoneMatch, returns 'phone'.\n   *\n   * @return {String}\n   */\n\n\n  PhoneMatch.prototype.getType = function () {\n    return 'phone';\n  };\n  /**\n   * Returns the phone number that was matched as a string, without any\n   * delimiter characters.\n   *\n   * Note: This is a string to allow for prefixed 0's.\n   *\n   * @return {String}\n   */\n\n\n  PhoneMatch.prototype.getPhoneNumber = function () {\n    return this.number;\n  };\n  /**\n   * Alias of {@link #getPhoneNumber}, returns the phone number that was\n   * matched as a string, without any delimiter characters.\n   *\n   * Note: This is a string to allow for prefixed 0's.\n   *\n   * @return {String}\n   */\n\n\n  PhoneMatch.prototype.getNumber = function () {\n    return this.getPhoneNumber();\n  };\n  /**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @return {String}\n   */\n\n\n  PhoneMatch.prototype.getAnchorHref = function () {\n    return 'tel:' + (this.plusSign ? '+' : '') + this.number;\n  };\n  /**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @return {String}\n   */\n\n\n  PhoneMatch.prototype.getAnchorText = function () {\n    return this.matchedText;\n  };\n\n  return PhoneMatch;\n}(Match);\n\nexport { PhoneMatch };","map":{"version":3,"sources":["../src/match/phone-match.ts"],"names":[],"mappings":";AAAA,SAAS,KAAT,QAAmC,SAAnC;AAEA;;;;;;;;;AASG;;AACH,IAAA,UAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgC,EAAA,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;AAwB/B;;;;AAIG;;;AACH,WAAA,UAAA,CAAa,GAAb,EAAkC;AAAlC,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAO,GAAP,KAAY,IADb;AA3BA;;;;;;;AAOG;;;AACc,IAAA,KAAA,CAAA,MAAA,GAAiB,EAAjB,CAmBiB,CAnBK;;AAEvC;;;;;;;;AAQG;;AACc,IAAA,KAAA,CAAA,QAAA,GAAoB,KAApB,CAQiB,CARW;;AAW5C,IAAA,KAAI,CAAC,MAAL,GAAc,GAAG,CAAC,MAAlB;AACA,IAAA,KAAI,CAAC,QAAL,GAAgB,GAAG,CAAC,QAApB;;AACA;AAGD;;;;;AAKG;;;AACH,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,WAAO,OAAP;AACA,GAFD;AAKA;;;;;;;AAOG;;;AACH,EAAA,UAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACC,WAAO,KAAK,MAAZ;AACA,GAFD;AAKA;;;;;;;AAOG;;;AACH,EAAA,UAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACC,WAAO,KAAK,cAAL,EAAP;AACA,GAFD;AAKA;;;;AAIG;;;AACH,EAAA,UAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACC,WAAO,UAAW,KAAK,QAAL,GAAgB,GAAhB,GAAsB,EAAjC,IAAwC,KAAK,MAApD;AACA,GAFD;AAKA;;;;AAIG;;;AACH,EAAA,UAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACC,WAAO,KAAK,WAAZ;AACA,GAFD;;AAID,SAAA,UAAA;AAAC,CA7FD,CAAgC,KAAhC,CAAA","sourcesContent":["import { Match, MatchConfig } from \"./match\";\n\n/**\n * @class Autolinker.match.Phone\n * @extends Autolinker.match.Match\n *\n * Represents a Phone number match found in an input string which should be\n * Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more\n * details.\n */\nexport class PhoneMatch extends Match {\n\n\t/**\n\t * @protected\n\t * @property {String} number (required)\n\t *\n\t * The phone number that was matched, without any delimiter characters.\n\t *\n\t * Note: This is a string to allow for prefixed 0's.\n\t */\n\tprivate readonly number: string = '';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @protected\n\t * @property  {Boolean} plusSign (required)\n\t *\n\t * `true` if the matched phone number started with a '+' sign. We'll include\n\t * it in the `tel:` URL if so, as this is needed for international numbers.\n\t *\n\t * Ex: '+1 (123) 456 7879'\n\t */\n\tprivate readonly plusSign: boolean = false;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\n\t/**\n\t * @method constructor\n\t * @param {Object} cfg The configuration properties for the Match\n\t *   instance, specified in an Object (map).\n\t */\n\tconstructor( cfg: PhoneMatchConfig ) {\n\t\tsuper( cfg );\n\n\t\tthis.number = cfg.number;\n\t\tthis.plusSign = cfg.plusSign;\n\t}\n\n\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t * For the case of PhoneMatch, returns 'phone'.\n\t *\n\t * @return {String}\n\t */\n\tgetType() {\n\t\treturn 'phone';\n\t}\n\n\n\t/**\n\t * Returns the phone number that was matched as a string, without any \n\t * delimiter characters. \n\t *\n\t * Note: This is a string to allow for prefixed 0's.\n\t *\n\t * @return {String}\n\t */\n\tgetPhoneNumber() {\n\t\treturn this.number;\n\t}\n\n\n\t/**\n\t * Alias of {@link #getPhoneNumber}, returns the phone number that was \n\t * matched as a string, without any delimiter characters.\n\t *\n\t * Note: This is a string to allow for prefixed 0's.\n\t *\n\t * @return {String}\n\t */\n\tgetNumber() {\n\t\treturn this.getPhoneNumber();\n\t}\n\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorHref() {\n\t\treturn 'tel:' + ( this.plusSign ? '+' : '' ) + this.number;\n\t}\n\n\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorText() {\n\t\treturn this.matchedText;\n\t}\n\n}\n\n\nexport interface PhoneMatchConfig extends MatchConfig {\n\tnumber: string;\n\tplusSign: boolean;\n}"]},"metadata":{},"sourceType":"module"}