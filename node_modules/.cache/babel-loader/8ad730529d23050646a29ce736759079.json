{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Matcher } from \"./matcher\";\nimport { alphaNumericAndMarksCharsStr, domainNameCharRegex } from \"../regex-lib\";\nimport { EmailMatch } from \"../match/email-match\";\nimport { throwUnhandledCaseError } from '../utils';\nimport { tldRegex } from \"./tld-regex\"; // For debugging: search for other \"For debugging\" lines\n// import CliTable from 'cli-table';\n// RegExp objects which are shared by all instances of EmailMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating EmailMatcher and its RegExp \n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314). \n// See descriptions of the properties where they are used for details about them\n\nvar localPartCharRegex = new RegExp(\"[\" + alphaNumericAndMarksCharsStr + \"!#$%&'*+/=?^_`{|}~-]\");\nvar strictTldRegex = new RegExp(\"^\" + tldRegex.source + \"$\");\n/**\n * @class Autolinker.matcher.Email\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find email matches in an input string.\n *\n * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more details.\n */\n\nvar EmailMatcher =\n/** @class */\nfunction (_super) {\n  __extends(EmailMatcher, _super);\n\n  function EmailMatcher() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Valid characters that can be used in the \"local\" part of an email address,\n     * i.e. the \"name\" part of \"name@site.com\"\n     */\n\n\n    _this.localPartCharRegex = localPartCharRegex;\n    /**\n     * Stricter TLD regex which adds a beginning and end check to ensure\n     * the string is a valid TLD\n     */\n\n    _this.strictTldRegex = strictTldRegex;\n    return _this;\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  EmailMatcher.prototype.parseMatches = function (text) {\n    var tagBuilder = this.tagBuilder,\n        localPartCharRegex = this.localPartCharRegex,\n        strictTldRegex = this.strictTldRegex,\n        matches = [],\n        len = text.length,\n        noCurrentEmailMatch = new CurrentEmailMatch(); // for matching a 'mailto:' prefix\n\n    var mailtoTransitions = {\n      'm': 'a',\n      'a': 'i',\n      'i': 'l',\n      'l': 't',\n      't': 'o',\n      'o': ':'\n    };\n    var charIdx = 0,\n        state = 0\n    /* NonEmailMatch */\n    ,\n        currentEmailMatch = noCurrentEmailMatch; // For debugging: search for other \"For debugging\" lines\n    // const table = new CliTable( {\n    // \thead: [ 'charIdx', 'char', 'state', 'charIdx', 'currentEmailAddress.idx', 'hasDomainDot' ]\n    // } );\n\n    while (charIdx < len) {\n      var char = text.charAt(charIdx); // For debugging: search for other \"For debugging\" lines\n      // table.push( \n      // \t[ charIdx, char, State[ state ], charIdx, currentEmailAddress.idx, currentEmailAddress.hasDomainDot ] \n      // );\n\n      switch (state) {\n        case 0\n        /* NonEmailMatch */\n        :\n          stateNonEmailAddress(char);\n          break;\n\n        case 1\n        /* Mailto */\n        :\n          stateMailTo(text.charAt(charIdx - 1), char);\n          break;\n\n        case 2\n        /* LocalPart */\n        :\n          stateLocalPart(char);\n          break;\n\n        case 3\n        /* LocalPartDot */\n        :\n          stateLocalPartDot(char);\n          break;\n\n        case 4\n        /* AtSign */\n        :\n          stateAtSign(char);\n          break;\n\n        case 5\n        /* DomainChar */\n        :\n          stateDomainChar(char);\n          break;\n\n        case 6\n        /* DomainHyphen */\n        :\n          stateDomainHyphen(char);\n          break;\n\n        case 7\n        /* DomainDot */\n        :\n          stateDomainDot(char);\n          break;\n\n        default:\n          throwUnhandledCaseError(state);\n      } // For debugging: search for other \"For debugging\" lines\n      // table.push( \n      // \t[ charIdx, char, State[ state ], charIdx, currentEmailAddress.idx, currentEmailAddress.hasDomainDot ] \n      // );\n\n\n      charIdx++;\n    } // Capture any valid match at the end of the string\n\n\n    captureMatchIfValidAndReset(); // For debugging: search for other \"For debugging\" lines\n    //console.log( '\\n' + table.toString() );\n\n    return matches; // Handles the state when we're not in an email address\n\n    function stateNonEmailAddress(char) {\n      if (char === 'm') {\n        beginEmailMatch(1\n        /* Mailto */\n        );\n      } else if (localPartCharRegex.test(char)) {\n        beginEmailMatch();\n      } else {// not an email address character, continue\n      }\n    } // Handles if we're reading a 'mailto:' prefix on the string\n\n\n    function stateMailTo(prevChar, char) {\n      if (prevChar === ':') {\n        // We've reached the end of the 'mailto:' prefix\n        if (localPartCharRegex.test(char)) {\n          state = 2\n          /* LocalPart */\n          ;\n          currentEmailMatch = new CurrentEmailMatch(__assign(__assign({}, currentEmailMatch), {\n            hasMailtoPrefix: true\n          }));\n        } else {\n          // we've matched 'mailto:' but didn't get anything meaningful\n          // immediately afterwards (for example, we encountered a \n          // space character, or an '@' character which formed 'mailto:@'\n          resetToNonEmailMatchState();\n        }\n      } else if (mailtoTransitions[prevChar] === char) {// We're currently reading the 'mailto:' prefix, stay in\n        // Mailto state\n      } else if (localPartCharRegex.test(char)) {\n        // We we're reading a prefix of 'mailto:', but encountered a\n        // different character that didn't continue the prefix\n        state = 2\n        /* LocalPart */\n        ;\n      } else if (char === '.') {\n        // We we're reading a prefix of 'mailto:', but encountered a\n        // dot character\n        state = 3\n        /* LocalPartDot */\n        ;\n      } else if (char === '@') {\n        // We we're reading a prefix of 'mailto:', but encountered a\n        // an @ character\n        state = 4\n        /* AtSign */\n        ;\n      } else {\n        // not an email address character, return to \"NonEmailAddress\" state\n        resetToNonEmailMatchState();\n      }\n    } // Handles the state when we're currently in the \"local part\" of an \n    // email address (as opposed to the \"domain part\")\n\n\n    function stateLocalPart(char) {\n      if (char === '.') {\n        state = 3\n        /* LocalPartDot */\n        ;\n      } else if (char === '@') {\n        state = 4\n        /* AtSign */\n        ;\n      } else if (localPartCharRegex.test(char)) {// stay in the \"local part\" of the email address\n      } else {\n        // not an email address character, return to \"NonEmailAddress\" state\n        resetToNonEmailMatchState();\n      }\n    } // Handles the state where we've read \n\n\n    function stateLocalPartDot(char) {\n      if (char === '.') {\n        // We read a second '.' in a row, not a valid email address \n        // local part\n        resetToNonEmailMatchState();\n      } else if (char === '@') {\n        // We read the '@' character immediately after a dot ('.'), not \n        // an email address\n        resetToNonEmailMatchState();\n      } else if (localPartCharRegex.test(char)) {\n        state = 2\n        /* LocalPart */\n        ;\n      } else {\n        // Anything else, not an email address\n        resetToNonEmailMatchState();\n      }\n    }\n\n    function stateAtSign(char) {\n      if (domainNameCharRegex.test(char)) {\n        state = 5\n        /* DomainChar */\n        ;\n      } else {\n        // Anything else, not an email address\n        resetToNonEmailMatchState();\n      }\n    }\n\n    function stateDomainChar(char) {\n      if (char === '.') {\n        state = 7\n        /* DomainDot */\n        ;\n      } else if (char === '-') {\n        state = 6\n        /* DomainHyphen */\n        ;\n      } else if (domainNameCharRegex.test(char)) {// Stay in the DomainChar state\n      } else {\n        // Anything else, we potentially matched if the criteria has\n        // been met\n        captureMatchIfValidAndReset();\n      }\n    }\n\n    function stateDomainHyphen(char) {\n      if (char === '-' || char === '.') {\n        // Not valid to have two hyphens (\"--\") or hypen+dot (\"-.\")\n        captureMatchIfValidAndReset();\n      } else if (domainNameCharRegex.test(char)) {\n        state = 5\n        /* DomainChar */\n        ;\n      } else {\n        // Anything else\n        captureMatchIfValidAndReset();\n      }\n    }\n\n    function stateDomainDot(char) {\n      if (char === '.' || char === '-') {\n        // not valid to have two dots (\"..\") or dot+hypen (\".-\")\n        captureMatchIfValidAndReset();\n      } else if (domainNameCharRegex.test(char)) {\n        state = 5\n        /* DomainChar */\n        ; // After having read a '.' and then a valid domain character,\n        // we now know that the domain part of the email is valid, and\n        // we have found at least a partial EmailMatch (however, the\n        // email address may have additional characters from this point)\n\n        currentEmailMatch = new CurrentEmailMatch(__assign(__assign({}, currentEmailMatch), {\n          hasDomainDot: true\n        }));\n      } else {\n        // Anything else\n        captureMatchIfValidAndReset();\n      }\n    }\n\n    function beginEmailMatch(newState) {\n      if (newState === void 0) {\n        newState = 2\n        /* LocalPart */\n        ;\n      }\n\n      state = newState;\n      currentEmailMatch = new CurrentEmailMatch({\n        idx: charIdx\n      });\n    }\n\n    function resetToNonEmailMatchState() {\n      state = 0\n      /* NonEmailMatch */\n      ;\n      currentEmailMatch = noCurrentEmailMatch;\n    }\n    /*\n     * Captures the current email address as an EmailMatch if it's valid,\n     * and resets the state to read another email address.\n     */\n\n\n    function captureMatchIfValidAndReset() {\n      if (currentEmailMatch.hasDomainDot) {\n        // we need at least one dot in the domain to be considered a valid email address\n        var matchedText = text.slice(currentEmailMatch.idx, charIdx); // If we read a '.' or '-' char that ended the email address\n        // (valid domain name characters, but only valid email address\n        // characters if they are followed by something else), strip \n        // it off now\n\n        if (/[-.]$/.test(matchedText)) {\n          matchedText = matchedText.slice(0, -1);\n        }\n\n        var emailAddress = currentEmailMatch.hasMailtoPrefix ? matchedText.slice('mailto:'.length) : matchedText; // if the email address has a valid TLD, add it to the list of matches\n\n        if (doesEmailHaveValidTld(emailAddress)) {\n          matches.push(new EmailMatch({\n            tagBuilder: tagBuilder,\n            matchedText: matchedText,\n            offset: currentEmailMatch.idx,\n            email: emailAddress\n          }));\n        }\n      }\n\n      resetToNonEmailMatchState();\n      /**\n       * Determines if the given email address has a valid TLD or not\n       * @param {string} emailAddress - email address\n       * @return {Boolean} - true is email have valid TLD, false otherwise\n       */\n\n      function doesEmailHaveValidTld(emailAddress) {\n        var emailAddressTld = emailAddress.split('.').pop() || '';\n        var emailAddressNormalized = emailAddressTld.toLowerCase();\n        var isValidTld = strictTldRegex.test(emailAddressNormalized);\n        return isValidTld;\n      }\n    }\n  };\n\n  return EmailMatcher;\n}(Matcher);\n\nexport { EmailMatcher };\n\nvar CurrentEmailMatch =\n/** @class */\nfunction () {\n  function CurrentEmailMatch(cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n\n    this.idx = cfg.idx !== undefined ? cfg.idx : -1;\n    this.hasMailtoPrefix = !!cfg.hasMailtoPrefix;\n    this.hasDomainDot = !!cfg.hasDomainDot;\n  }\n\n  return CurrentEmailMatch;\n}();","map":null,"metadata":{},"sourceType":"module"}