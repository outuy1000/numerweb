{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Matcher } from \"./matcher\";\nimport { PhoneMatch } from \"../match/phone-match\";\nimport { nonDigitRe } from '../regex-lib'; // RegExp objects which are shared by all instances of PhoneMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating PhoneMatcher and its RegExp\n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314).\n// See descriptions of the properties where they are used for details about them\n// Over the years, many people have added to this regex, but it should have been\n// split up by country. Maybe one day we can break this down.\n\nvar mostPhoneNumbers = /(?:(?:(?:(\\+)?\\d{1,3}[-\\040.]?)?\\(?\\d{3}\\)?[-\\040.]?\\d{3}[-\\040.]?\\d{4})|(?:(\\+)(?:9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|2[98654321]\\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)[-\\040.]?(?:\\d[-\\040.]?){6,12}\\d+))([,;]+[0-9]+#?)*/; // Regex for Japanese phone numbers\n\nvar japanesePhoneRe = /(0([1-9]{1}-?[1-9]\\d{3}|[1-9]{2}-?\\d{3}|[1-9]{2}\\d{1}-?\\d{2}|[1-9]{2}\\d{2}-?\\d{1})-?\\d{4}|0[789]0-?\\d{4}-?\\d{4}|050-?\\d{4}-?\\d{4})/; // Combined regex\n\nvar phoneMatcherRegex = new RegExp(mostPhoneNumbers.source + \"|\" + japanesePhoneRe.source, 'g');\n/**\n * @class Autolinker.matcher.Phone\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find Phone number matches in an input string.\n *\n * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more\n * details.\n */\n\nvar PhoneMatcher =\n/** @class */\nfunction (_super) {\n  __extends(PhoneMatcher, _super);\n\n  function PhoneMatcher() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * The regular expression to match Phone numbers. Example matches:\n     *\n     *     (123) 456-7890\n     *     123 456 7890\n     *     123-456-7890\n     *     +18004441234,,;,10226420346#\n     *     +1 (800) 444 1234\n     *     10226420346#\n     *     1-800-444-1234,1022,64,20346#\n     *\n     * This regular expression has the following capturing groups:\n     *\n     * 1 or 2. The prefixed '+' sign, if there is one.\n     *\n     * @protected\n     * @property {RegExp} matcherRegex\n     */\n\n\n    _this.matcherRegex = phoneMatcherRegex;\n    return _this;\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  PhoneMatcher.prototype.parseMatches = function (text) {\n    var matcherRegex = this.matcherRegex,\n        tagBuilder = this.tagBuilder,\n        matches = [],\n        match;\n\n    while ((match = matcherRegex.exec(text)) !== null) {\n      // Remove non-numeric values from phone number string\n      var matchedText = match[0],\n          cleanNumber = matchedText.replace(/[^0-9,;#]/g, ''),\n          // strip out non-digit characters exclude comma semicolon and #\n      plusSign = !!(match[1] || match[2]),\n          // match[ 1 ] or match[ 2 ] is the prefixed plus sign, if there is one\n      before = match.index == 0 ? '' : text.substr(match.index - 1, 1),\n          after = text.substr(match.index + matchedText.length, 1),\n          contextClear = !before.match(/\\d/) && !after.match(/\\d/);\n\n      if (this.testMatch(match[3]) && this.testMatch(matchedText) && contextClear) {\n        matches.push(new PhoneMatch({\n          tagBuilder: tagBuilder,\n          matchedText: matchedText,\n          offset: match.index,\n          number: cleanNumber,\n          plusSign: plusSign\n        }));\n      }\n    }\n\n    return matches;\n  };\n\n  PhoneMatcher.prototype.testMatch = function (text) {\n    return nonDigitRe.test(text);\n  };\n\n  return PhoneMatcher;\n}(Matcher);\n\nexport { PhoneMatcher };","map":{"version":3,"sources":["../src/matcher/phone-matcher.ts"],"names":[],"mappings":";AAAA,SAAS,OAAT,QAAwB,WAAxB;AACA,SAAS,UAAT,QAA2B,sBAA3B;AAEA,SAAS,UAAT,QAA2B,cAA3B,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,IAAM,gBAAgB,GAAG,sRAAzB,C,CAEA;;AACA,IAAM,eAAe,GAAG,oIAAxB,C,CAEA;;AACA,IAAM,iBAAiB,GAAG,IAAI,MAAJ,CAAc,gBAAgB,CAAC,MAAjB,GAAuB,GAAvB,GAA2B,eAAe,CAAC,MAAzD,EAAmE,GAAnE,CAA1B;AAGA;;;;;;;;AAQG;;AACH,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;;AAAlC,WAAA,YAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AAEC;;;;;;;;;;;;;;;;;AAiBG;;;AACO,IAAA,KAAA,CAAA,YAAA,GAAe,iBAAf;;AAuCV;AArCA;;AAEG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAc,IAAd,EAA0B;AACzB,QAAI,YAAY,GAAG,KAAK,YAAxB;AAAA,QACC,UAAU,GAAG,KAAK,UADnB;AAAA,QAEC,OAAO,GAAY,EAFpB;AAAA,QAGC,KAHD;;AAKA,WAAO,CAAE,KAAK,GAAG,YAAY,CAAC,IAAb,CAAmB,IAAnB,CAAV,MAA0C,IAAjD,EAAwD;AACvD;AACA,UAAI,WAAW,GAAG,KAAK,CAAE,CAAF,CAAvB;AAAA,UACC,WAAW,GAAG,WAAW,CAAC,OAAZ,CAAqB,YAArB,EAAmC,EAAnC,CADf;AAAA,UACwD;AACvD,MAAA,QAAQ,GAAG,CAAC,EAAG,KAAK,CAAE,CAAF,CAAL,IAAc,KAAK,CAAE,CAAF,CAAtB,CAFb;AAAA,UAE4C;AAC3C,MAAA,MAAM,GAAG,KAAK,CAAC,KAAN,IAAe,CAAf,GAAmB,EAAnB,GAAwB,IAAI,CAAC,MAAL,CAAa,KAAK,CAAC,KAAN,GAAc,CAA3B,EAA8B,CAA9B,CAHlC;AAAA,UAIC,KAAK,GAAG,IAAI,CAAC,MAAL,CAAa,KAAK,CAAC,KAAN,GAAc,WAAW,CAAC,MAAvC,EAA+C,CAA/C,CAJT;AAAA,UAKC,YAAY,GAAG,CAAC,MAAM,CAAC,KAAP,CAAc,IAAd,CAAD,IAAyB,CAAC,KAAK,CAAC,KAAN,CAAa,IAAb,CAL1C;;AAOA,UAAI,KAAK,SAAL,CAAgB,KAAK,CAAE,CAAF,CAArB,KAAgC,KAAK,SAAL,CAAgB,WAAhB,CAAhC,IAAiE,YAArE,EAAoF;AACnF,QAAA,OAAO,CAAC,IAAR,CAAc,IAAI,UAAJ,CAAgB;AAC7B,UAAA,UAAU,EAAE,UADiB;AAE7B,UAAA,WAAW,EAAE,WAFgB;AAG7B,UAAA,MAAM,EAAE,KAAK,CAAC,KAHe;AAI7B,UAAA,MAAM,EAAE,WAJqB;AAK7B,UAAA,QAAQ,EAAE;AALmB,SAAhB,CAAd;AAOA;AACD;;AAED,WAAO,OAAP;AACA,GA3BD;;AA8BU,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAV,UAAqB,IAArB,EAAiC;AAChC,WAAO,UAAU,CAAC,IAAX,CAAiB,IAAjB,CAAP;AACA,GAFS;;AAIX,SAAA,YAAA;AAAC,CA3DD,CAAkC,OAAlC,CAAA","sourcesContent":["import { Matcher } from \"./matcher\";\nimport { PhoneMatch } from \"../match/phone-match\";\nimport { Match } from \"../match/match\";\nimport { nonDigitRe } from '../regex-lib';\n\n// RegExp objects which are shared by all instances of PhoneMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating PhoneMatcher and its RegExp\n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314).\n// See descriptions of the properties where they are used for details about them\n\n// Over the years, many people have added to this regex, but it should have been\n// split up by country. Maybe one day we can break this down.\nconst mostPhoneNumbers = /(?:(?:(?:(\\+)?\\d{1,3}[-\\040.]?)?\\(?\\d{3}\\)?[-\\040.]?\\d{3}[-\\040.]?\\d{4})|(?:(\\+)(?:9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|2[98654321]\\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)[-\\040.]?(?:\\d[-\\040.]?){6,12}\\d+))([,;]+[0-9]+#?)*/;\n\n// Regex for Japanese phone numbers\nconst japanesePhoneRe = /(0([1-9]{1}-?[1-9]\\d{3}|[1-9]{2}-?\\d{3}|[1-9]{2}\\d{1}-?\\d{2}|[1-9]{2}\\d{2}-?\\d{1})-?\\d{4}|0[789]0-?\\d{4}-?\\d{4}|050-?\\d{4}-?\\d{4})/;\n\n// Combined regex\nconst phoneMatcherRegex = new RegExp(`${mostPhoneNumbers.source}|${japanesePhoneRe.source}`, 'g');\n\n\n/**\n * @class Autolinker.matcher.Phone\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find Phone number matches in an input string.\n *\n * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more\n * details.\n */\nexport class PhoneMatcher extends Matcher {\n\n\t/**\n\t * The regular expression to match Phone numbers. Example matches:\n\t *\n\t *     (123) 456-7890\n\t *     123 456 7890\n\t *     123-456-7890\n\t *     +18004441234,,;,10226420346#\n\t *     +1 (800) 444 1234\n\t *     10226420346#\n\t *     1-800-444-1234,1022,64,20346#\n\t *\n\t * This regular expression has the following capturing groups:\n\t *\n\t * 1 or 2. The prefixed '+' sign, if there is one.\n\t *\n\t * @protected\n\t * @property {RegExp} matcherRegex\n\t */\n\tprotected matcherRegex = phoneMatcherRegex;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tparseMatches( text: string ) {\n\t\tlet matcherRegex = this.matcherRegex,\n\t\t\ttagBuilder = this.tagBuilder,\n\t\t\tmatches: Match[] = [],\n\t\t\tmatch: RegExpExecArray | null;\n\n\t\twhile( ( match = matcherRegex.exec( text ) ) !== null ) {\n\t\t\t// Remove non-numeric values from phone number string\n\t\t\tvar matchedText = match[ 0 ],\n\t\t\t\tcleanNumber = matchedText.replace( /[^0-9,;#]/g, '' ), // strip out non-digit characters exclude comma semicolon and #\n\t\t\t\tplusSign = !!( match[ 1 ] || match[ 2 ] ), // match[ 1 ] or match[ 2 ] is the prefixed plus sign, if there is one\n\t\t\t\tbefore = match.index == 0 ? '' : text.substr( match.index - 1, 1 ),\n\t\t\t\tafter = text.substr( match.index + matchedText.length, 1 ),\n\t\t\t\tcontextClear = !before.match( /\\d/ ) && !after.match( /\\d/ );\n\n\t\t\tif( this.testMatch( match[ 3 ] ) && this.testMatch( matchedText ) && contextClear ) {\n\t\t\t\tmatches.push( new PhoneMatch( {\n\t\t\t\t\ttagBuilder: tagBuilder,\n\t\t\t\t\tmatchedText: matchedText,\n\t\t\t\t\toffset: match.index,\n\t\t\t\t\tnumber: cleanNumber,\n\t\t\t\t\tplusSign: plusSign\n\t\t\t\t} ) );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t}\n\n\n\tprotected testMatch( text: string ) {\n\t\treturn nonDigitRe.test( text );\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}