{"ast":null,"code":"/**\n * Date: 2015-10-05\n * Author: Kasper SÃ¸fren <soefritz@gmail.com> (https://github.com/kafoso)\n *\n * A truncation feature, where the ellipsis will be placed at a section within\n * the URL making it still somewhat human readable.\n *\n * @param {String} url\t\t\t\t\t\t A URL.\n * @param {Number} truncateLen\t\t The maximum length of the truncated output URL string.\n * @param {String} ellipsisChars\t The characters to place within the url, e.g. \"...\".\n * @return {String} The truncated URL.\n */\nexport function truncateSmart(url, truncateLen, ellipsisChars) {\n  var ellipsisLengthBeforeParsing;\n  var ellipsisLength;\n\n  if (ellipsisChars == null) {\n    ellipsisChars = '&hellip;';\n    ellipsisLength = 3;\n    ellipsisLengthBeforeParsing = 8;\n  } else {\n    ellipsisLength = ellipsisChars.length;\n    ellipsisLengthBeforeParsing = ellipsisChars.length;\n  }\n\n  var parse_url = function (url) {\n    var urlObj = {};\n    var urlSub = url;\n    var match = urlSub.match(/^([a-z]+):\\/\\//i);\n\n    if (match) {\n      urlObj.scheme = match[1];\n      urlSub = urlSub.substr(match[0].length);\n    }\n\n    match = urlSub.match(/^(.*?)(?=(\\?|#|\\/|$))/i);\n\n    if (match) {\n      urlObj.host = match[1];\n      urlSub = urlSub.substr(match[0].length);\n    }\n\n    match = urlSub.match(/^\\/(.*?)(?=(\\?|#|$))/i);\n\n    if (match) {\n      urlObj.path = match[1];\n      urlSub = urlSub.substr(match[0].length);\n    }\n\n    match = urlSub.match(/^\\?(.*?)(?=(#|$))/i);\n\n    if (match) {\n      urlObj.query = match[1];\n      urlSub = urlSub.substr(match[0].length);\n    }\n\n    match = urlSub.match(/^#(.*?)$/i);\n\n    if (match) {\n      urlObj.fragment = match[1]; //urlSub = urlSub.substr(match[0].length);  -- not used. Uncomment if adding another block.\n    }\n\n    return urlObj;\n  };\n\n  var buildUrl = function (urlObj) {\n    var url = \"\";\n\n    if (urlObj.scheme && urlObj.host) {\n      url += urlObj.scheme + \"://\";\n    }\n\n    if (urlObj.host) {\n      url += urlObj.host;\n    }\n\n    if (urlObj.path) {\n      url += \"/\" + urlObj.path;\n    }\n\n    if (urlObj.query) {\n      url += \"?\" + urlObj.query;\n    }\n\n    if (urlObj.fragment) {\n      url += \"#\" + urlObj.fragment;\n    }\n\n    return url;\n  };\n\n  var buildSegment = function (segment, remainingAvailableLength) {\n    var remainingAvailableLengthHalf = remainingAvailableLength / 2,\n        startOffset = Math.ceil(remainingAvailableLengthHalf),\n        endOffset = -1 * Math.floor(remainingAvailableLengthHalf),\n        end = \"\";\n\n    if (endOffset < 0) {\n      end = segment.substr(endOffset);\n    }\n\n    return segment.substr(0, startOffset) + ellipsisChars + end;\n  };\n\n  if (url.length <= truncateLen) {\n    return url;\n  }\n\n  var availableLength = truncateLen - ellipsisLength;\n  var urlObj = parse_url(url); // Clean up the URL\n\n  if (urlObj.query) {\n    var matchQuery = urlObj.query.match(/^(.*?)(?=(\\?|\\#))(.*?)$/i);\n\n    if (matchQuery) {\n      // Malformed URL; two or more \"?\". Removed any content behind the 2nd.\n      urlObj.query = urlObj.query.substr(0, matchQuery[1].length);\n      url = buildUrl(urlObj);\n    }\n  }\n\n  if (url.length <= truncateLen) {\n    return url;\n  }\n\n  if (urlObj.host) {\n    urlObj.host = urlObj.host.replace(/^www\\./, \"\");\n    url = buildUrl(urlObj);\n  }\n\n  if (url.length <= truncateLen) {\n    return url;\n  } // Process and build the URL\n\n\n  var str = \"\";\n\n  if (urlObj.host) {\n    str += urlObj.host;\n  }\n\n  if (str.length >= availableLength) {\n    if (urlObj.host.length == truncateLen) {\n      return (urlObj.host.substr(0, truncateLen - ellipsisLength) + ellipsisChars).substr(0, availableLength + ellipsisLengthBeforeParsing);\n    }\n\n    return buildSegment(str, availableLength).substr(0, availableLength + ellipsisLengthBeforeParsing);\n  }\n\n  var pathAndQuery = \"\";\n\n  if (urlObj.path) {\n    pathAndQuery += \"/\" + urlObj.path;\n  }\n\n  if (urlObj.query) {\n    pathAndQuery += \"?\" + urlObj.query;\n  }\n\n  if (pathAndQuery) {\n    if ((str + pathAndQuery).length >= availableLength) {\n      if ((str + pathAndQuery).length == truncateLen) {\n        return (str + pathAndQuery).substr(0, truncateLen);\n      }\n\n      var remainingAvailableLength = availableLength - str.length;\n      return (str + buildSegment(pathAndQuery, remainingAvailableLength)).substr(0, availableLength + ellipsisLengthBeforeParsing);\n    } else {\n      str += pathAndQuery;\n    }\n  }\n\n  if (urlObj.fragment) {\n    var fragment = \"#\" + urlObj.fragment;\n\n    if ((str + fragment).length >= availableLength) {\n      if ((str + fragment).length == truncateLen) {\n        return (str + fragment).substr(0, truncateLen);\n      }\n\n      var remainingAvailableLength2 = availableLength - str.length;\n      return (str + buildSegment(fragment, remainingAvailableLength2)).substr(0, availableLength + ellipsisLengthBeforeParsing);\n    } else {\n      str += fragment;\n    }\n  }\n\n  if (urlObj.scheme && urlObj.host) {\n    var scheme = urlObj.scheme + \"://\";\n\n    if ((str + scheme).length < availableLength) {\n      return (scheme + str).substr(0, truncateLen);\n    }\n  }\n\n  if (str.length <= truncateLen) {\n    return str;\n  }\n\n  var end = \"\";\n\n  if (availableLength > 0) {\n    end = str.substr(-1 * Math.floor(availableLength / 2));\n  }\n\n  return (str.substr(0, Math.ceil(availableLength / 2)) + ellipsisChars + end).substr(0, availableLength + ellipsisLengthBeforeParsing);\n}","map":{"version":3,"sources":["../src/truncate/truncate-smart.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Date: 2015-10-05\n * Author: Kasper SÃ¸fren <soefritz@gmail.com> (https://github.com/kafoso)\n *\n * A truncation feature, where the ellipsis will be placed at a section within\n * the URL making it still somewhat human readable.\n *\n * @param {String} url\t\t\t\t\t\t A URL.\n * @param {Number} truncateLen\t\t The maximum length of the truncated output URL string.\n * @param {String} ellipsisChars\t The characters to place within the url, e.g. \"...\".\n * @return {String} The truncated URL.\n */\nexport function truncateSmart( url: string, truncateLen: number, ellipsisChars?: string ) {\n\n\tlet ellipsisLengthBeforeParsing: number;\n\tlet ellipsisLength: number;\n\n\tif(ellipsisChars == null) {\n\t\tellipsisChars = '&hellip;';\n\t\tellipsisLength = 3;\n\t\tellipsisLengthBeforeParsing = 8;\n\t} else {\n\t\tellipsisLength = ellipsisChars.length;\n\t\tellipsisLengthBeforeParsing = ellipsisChars.length;\n\t}\n\n\tlet parse_url = function(url: string) { // Functionality inspired by PHP function of same name\n\t\tlet urlObj: UrlObject = {};\n\t\tlet urlSub = url;\n\t\tlet match = urlSub.match(/^([a-z]+):\\/\\//i);\n\t\tif (match) {\n\t\t\turlObj.scheme = match[1];\n\t\t\turlSub = urlSub.substr(match[0].length);\n\t\t}\n\t\tmatch = urlSub.match(/^(.*?)(?=(\\?|#|\\/|$))/i);\n\t\tif (match) {\n\t\t\turlObj.host = match[1];\n\t\t\turlSub = urlSub.substr(match[0].length);\n\t\t}\n\t\tmatch = urlSub.match(/^\\/(.*?)(?=(\\?|#|$))/i);\n\t\tif (match) {\n\t\t\turlObj.path = match[1];\n\t\t\turlSub = urlSub.substr(match[0].length);\n\t\t}\n\t\tmatch = urlSub.match(/^\\?(.*?)(?=(#|$))/i);\n\t\tif (match) {\n\t\t\turlObj.query = match[1];\n\t\t\turlSub = urlSub.substr(match[0].length);\n\t\t}\n\t\tmatch = urlSub.match(/^#(.*?)$/i);\n\t\tif (match) {\n\t\t\turlObj.fragment = match[1];\n\t\t\t//urlSub = urlSub.substr(match[0].length);  -- not used. Uncomment if adding another block.\n\t\t}\n\t\treturn urlObj;\n\t};\n\n\tlet buildUrl = function(urlObj: UrlObject){\n\t\tlet url = \"\";\n\t\tif (urlObj.scheme && urlObj.host) {\n\t\t\turl += urlObj.scheme + \"://\";\n\t\t}\n\t\tif (urlObj.host) {\n\t\t\turl += urlObj.host;\n\t\t}\n\t\tif (urlObj.path) {\n\t\t\turl += \"/\" + urlObj.path;\n\t\t}\n\t\tif (urlObj.query) {\n\t\t\turl += \"?\" + urlObj.query;\n\t\t}\n\t\tif (urlObj.fragment) {\n\t\t\turl += \"#\" + urlObj.fragment;\n\t\t}\n\t\treturn url;\n\t};\n\n\tlet buildSegment = function(segment: string, remainingAvailableLength: number){\n\t\tlet remainingAvailableLengthHalf = remainingAvailableLength/ 2,\n\t\t\t\tstartOffset = Math.ceil(remainingAvailableLengthHalf),\n\t\t\t\tendOffset = (-1)*Math.floor(remainingAvailableLengthHalf),\n\t\t\t\tend = \"\";\n\t\tif (endOffset < 0) {\n\t\t\tend = segment.substr(endOffset);\n\t\t}\n\t\treturn segment.substr(0, startOffset) + ellipsisChars + end;\n\t};\n\tif (url.length <= truncateLen) {\n\t\treturn url;\n\t}\n\tlet availableLength = truncateLen - ellipsisLength;\n\tlet urlObj = parse_url(url);\n\t// Clean up the URL\n\tif (urlObj.query) {\n\t\tlet matchQuery = urlObj.query.match(/^(.*?)(?=(\\?|\\#))(.*?)$/i);\n\t\tif (matchQuery) {\n\t\t\t// Malformed URL; two or more \"?\". Removed any content behind the 2nd.\n\t\t\turlObj.query = urlObj.query.substr(0, matchQuery[1].length);\n\t\t\turl = buildUrl(urlObj);\n\t\t}\n\t}\n\tif (url.length <= truncateLen) {\n\t\treturn url;\n\t}\n\tif (urlObj.host) {\n\t\turlObj.host = urlObj.host.replace(/^www\\./, \"\");\n\t\turl = buildUrl(urlObj);\n\t}\n\tif (url.length <= truncateLen) {\n\t\treturn url;\n\t}\n\t// Process and build the URL\n\tlet str = \"\";\n\tif (urlObj.host) {\n\t\tstr += urlObj.host;\n\t}\n\tif (str.length >= availableLength) {\n\t\tif ((urlObj.host as string).length == truncateLen) {\n\t\t\treturn ((urlObj.host as string).substr(0, (truncateLen - ellipsisLength)) + ellipsisChars).substr(0, availableLength + ellipsisLengthBeforeParsing);\n\t\t}\n\t\treturn buildSegment(str, availableLength).substr(0, availableLength + ellipsisLengthBeforeParsing);\n\t}\n\tlet pathAndQuery = \"\";\n\tif (urlObj.path) {\n\t\tpathAndQuery += \"/\" + urlObj.path;\n\t}\n\tif (urlObj.query) {\n\t\tpathAndQuery += \"?\" + urlObj.query;\n\t}\n\tif (pathAndQuery) {\n\t\tif ((str+pathAndQuery).length >= availableLength) {\n\t\t\tif ((str+pathAndQuery).length == truncateLen) {\n\t\t\t\treturn (str + pathAndQuery).substr(0, truncateLen);\n\t\t\t}\n\t\t\tlet remainingAvailableLength = availableLength - str.length;\n\t\t\treturn (str + buildSegment(pathAndQuery, remainingAvailableLength)).substr(0, availableLength + ellipsisLengthBeforeParsing);\n\t\t} else {\n\t\t\tstr += pathAndQuery;\n\t\t}\n\t}\n\tif (urlObj.fragment) {\n\t\tlet fragment = \"#\"+urlObj.fragment;\n\t\tif ((str+fragment).length >= availableLength) {\n\t\t\tif ((str+fragment).length == truncateLen) {\n\t\t\t\treturn (str + fragment).substr(0, truncateLen);\n\t\t\t}\n\t\t\tlet remainingAvailableLength2 = availableLength - str.length;\n\t\t\treturn (str + buildSegment(fragment, remainingAvailableLength2)).substr(0, availableLength + ellipsisLengthBeforeParsing);\n\t\t} else {\n\t\t\tstr += fragment;\n\t\t}\n\t}\n\tif (urlObj.scheme && urlObj.host) {\n\t\tlet scheme = urlObj.scheme + \"://\";\n\t\tif ((str+scheme).length < availableLength) {\n\t\t\treturn (scheme + str).substr(0, truncateLen);\n\t\t}\n\t}\n\tif (str.length <= truncateLen) {\n\t\treturn str;\n\t}\n\tlet end = \"\";\n\tif (availableLength > 0) {\n\t\tend = str.substr((-1)*Math.floor(availableLength/2));\n\t}\n\treturn (str.substr(0, Math.ceil(availableLength/2)) + ellipsisChars + end).substr(0, availableLength + ellipsisLengthBeforeParsing);\n}\n\n\ninterface UrlObject {\n\tscheme?: string;\n\thost?: string;\n\tpath?: string;\n\tquery?: string;\n\tfragment?: string\n}"]},"metadata":{},"sourceType":"module"}