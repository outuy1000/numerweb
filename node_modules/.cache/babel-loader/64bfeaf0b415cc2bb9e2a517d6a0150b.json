{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Match } from \"./match\";\n/**\n * @class Autolinker.match.Hashtag\n * @extends Autolinker.match.Match\n *\n * Represents a Hashtag match found in an input string which should be\n * Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more\n * details.\n */\n\nvar HashtagMatch =\n/** @class */\nfunction (_super) {\n  __extends(HashtagMatch, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n\n\n  function HashtagMatch(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @cfg {String} serviceName\n     *\n     * The service to point hashtag matches to. See {@link Autolinker#hashtag}\n     * for available values.\n     */\n\n\n    _this.serviceName = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {String} hashtag (required)\n     *\n     * The HashtagMatch that was matched, without the '#'.\n     */\n\n    _this.hashtag = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    _this.serviceName = cfg.serviceName;\n    _this.hashtag = cfg.hashtag;\n    return _this;\n  }\n  /**\n   * Returns a string name for the type of match that this class represents.\n   * For the case of HashtagMatch, returns 'hashtag'.\n   *\n   * @return {String}\n   */\n\n\n  HashtagMatch.prototype.getType = function () {\n    return 'hashtag';\n  };\n  /**\n   * Returns the configured {@link #serviceName} to point the HashtagMatch to.\n   * Ex: 'facebook', 'twitter'.\n   *\n   * @return {String}\n   */\n\n\n  HashtagMatch.prototype.getServiceName = function () {\n    return this.serviceName;\n  };\n  /**\n   * Returns the matched hashtag, without the '#' character.\n   *\n   * @return {String}\n   */\n\n\n  HashtagMatch.prototype.getHashtag = function () {\n    return this.hashtag;\n  };\n  /**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @return {String}\n   */\n\n\n  HashtagMatch.prototype.getAnchorHref = function () {\n    var serviceName = this.serviceName,\n        hashtag = this.hashtag;\n\n    switch (serviceName) {\n      case 'twitter':\n        return 'https://twitter.com/hashtag/' + hashtag;\n\n      case 'facebook':\n        return 'https://www.facebook.com/hashtag/' + hashtag;\n\n      case 'instagram':\n        return 'https://instagram.com/explore/tags/' + hashtag;\n\n      default:\n        // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n        throw new Error('Unknown service name to point hashtag to: ' + serviceName);\n    }\n  };\n  /**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @return {String}\n   */\n\n\n  HashtagMatch.prototype.getAnchorText = function () {\n    return '#' + this.hashtag;\n  };\n\n  return HashtagMatch;\n}(Match);\n\nexport { HashtagMatch };","map":{"version":3,"sources":["../src/match/hashtag-match.ts"],"names":[],"mappings":";AAAA,SAAS,KAAT,QAAmC,SAAnC;AAEA;;;;;;;;;AASG;;AACH,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;AAkBjC;;;;AAIG;;;AACH,WAAA,YAAA,CAAa,GAAb,EAAoC;AAApC,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAO,GAAP,KAAY,IADb;AArBA;;;;;AAKG;;;AACc,IAAA,KAAA,CAAA,WAAA,GAAsB,EAAtB,CAemB,CAfQ;;AAE5C;;;;AAIG;;AACc,IAAA,KAAA,CAAA,OAAA,GAAkB,EAAlB,CAQmB,CARI;;AAWvC,IAAA,KAAI,CAAC,WAAL,GAAmB,GAAG,CAAC,WAAvB;AACA,IAAA,KAAI,CAAC,OAAL,GAAe,GAAG,CAAC,OAAnB;;AACA;AAGD;;;;;AAKG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,WAAO,SAAP;AACA,GAFD;AAKA;;;;;AAKG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACC,WAAO,KAAK,WAAZ;AACA,GAFD;AAKA;;;;AAIG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AACC,WAAO,KAAK,OAAZ;AACA,GAFD;AAKA;;;;AAIG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACC,QAAI,WAAW,GAAG,KAAK,WAAvB;AAAA,QACI,OAAO,GAAG,KAAK,OADnB;;AAGA,YAAQ,WAAR;AACC,WAAK,SAAL;AACC,eAAO,iCAAiC,OAAxC;;AACD,WAAK,UAAL;AACC,eAAO,sCAAsC,OAA7C;;AACD,WAAK,WAAL;AACC,eAAO,wCAAwC,OAA/C;;AAED;AAAW;AACV,cAAM,IAAI,KAAJ,CAAW,+CAA+C,WAA1D,CAAN;AATF;AAWA,GAfD;AAkBA;;;;AAIG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACC,WAAO,MAAM,KAAK,OAAlB;AACA,GAFD;;AAID,SAAA,YAAA;AAAC,CA/FD,CAAkC,KAAlC,CAAA","sourcesContent":["import { Match, MatchConfig } from \"./match\";\n\n/**\n * @class Autolinker.match.Hashtag\n * @extends Autolinker.match.Match\n *\n * Represents a Hashtag match found in an input string which should be\n * Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more\n * details.\n */\nexport class HashtagMatch extends Match {\n\n\t/**\n\t * @cfg {String} serviceName\n\t *\n\t * The service to point hashtag matches to. See {@link Autolinker#hashtag}\n\t * for available values.\n\t */\n\tprivate readonly serviceName: string = '';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {String} hashtag (required)\n\t *\n\t * The HashtagMatch that was matched, without the '#'.\n\t */\n\tprivate readonly hashtag: string = '';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\n\t/**\n\t * @method constructor\n\t * @param {Object} cfg The configuration properties for the Match\n\t *   instance, specified in an Object (map).\n\t */\n\tconstructor( cfg: HashtagMatchConfig ) {\n\t\tsuper( cfg );\n\n\t\tthis.serviceName = cfg.serviceName;\n\t\tthis.hashtag = cfg.hashtag;\n\t}\n\n\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t * For the case of HashtagMatch, returns 'hashtag'.\n\t *\n\t * @return {String}\n\t */\n\tgetType() {\n\t\treturn 'hashtag';\n\t}\n\n\n\t/**\n\t * Returns the configured {@link #serviceName} to point the HashtagMatch to.\n\t * Ex: 'facebook', 'twitter'.\n\t *\n\t * @return {String}\n\t */\n\tgetServiceName() {\n\t\treturn this.serviceName;\n\t}\n\n\n\t/**\n\t * Returns the matched hashtag, without the '#' character.\n\t *\n\t * @return {String}\n\t */\n\tgetHashtag() {\n\t\treturn this.hashtag;\n\t}\n\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorHref() {\n\t\tlet serviceName = this.serviceName,\n\t\t    hashtag = this.hashtag;\n\n\t\tswitch( serviceName ) {\n\t\t\tcase 'twitter' :\n\t\t\t\treturn 'https://twitter.com/hashtag/' + hashtag;\n\t\t\tcase 'facebook' :\n\t\t\t\treturn 'https://www.facebook.com/hashtag/' + hashtag;\n\t\t\tcase 'instagram' :\n\t\t\t\treturn 'https://instagram.com/explore/tags/' + hashtag;\n\n\t\t\tdefault :  // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n\t\t\t\tthrow new Error( 'Unknown service name to point hashtag to: ' + serviceName );\n\t\t}\n\t}\n\n\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorText() {\n\t\treturn '#' + this.hashtag;\n\t}\n\n}\n\nexport interface HashtagMatchConfig extends MatchConfig {\n\tserviceName: string;\n\thashtag: string;\n}"]},"metadata":{},"sourceType":"module"}