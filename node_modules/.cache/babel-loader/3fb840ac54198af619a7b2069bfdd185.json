{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { letterRe, digitRe, whitespaceRe, quoteRe, controlCharsRe } from '../regex-lib';\nimport { throwUnhandledCaseError } from '../utils'; // For debugging: search for other \"For debugging\" lines\n// import CliTable from 'cli-table';\n\n/**\n * Parses an HTML string, calling the callbacks to notify of tags and text.\n *\n * ## History\n *\n * This file previously used a regular expression to find html tags in the input\n * text. Unfortunately, we ran into a bunch of catastrophic backtracking issues\n * with certain input text, causing Autolinker to either hang or just take a\n * really long time to parse the string.\n *\n * The current code is intended to be a O(n) algorithm that walks through\n * the string in one pass, and tries to be as cheap as possible. We don't need\n * to implement the full HTML spec, but rather simply determine where the string\n * looks like an HTML tag, and where it looks like text (so that we can autolink\n * that).\n *\n * This state machine parser is intended just to be a simple but performant\n * parser of HTML for the subset of requirements we have. We simply need to:\n *\n * 1. Determine where HTML tags are\n * 2. Determine the tag name (Autolinker specifically only cares about <a>,\n *    <script>, and <style> tags, so as not to link any text within them)\n *\n * We don't need to:\n *\n * 1. Create a parse tree\n * 2. Auto-close tags with invalid markup\n * 3. etc.\n *\n * The other intention behind this is that we didn't want to add external\n * dependencies on the Autolinker utility which would increase its size. For\n * instance, adding htmlparser2 adds 125kb to the minified output file,\n * increasing its final size from 47kb to 172kb (at the time of writing). It\n * also doesn't work exactly correctly, treating the string \"<3 blah blah blah\"\n * as an HTML tag.\n *\n * Reference for HTML spec:\n *\n *     https://www.w3.org/TR/html51/syntax.html#sec-tokenization\n *\n * @param {String} html The HTML to parse\n * @param {Object} callbacks\n * @param {Function} callbacks.onOpenTag Callback function to call when an open\n *   tag is parsed. Called with the tagName as its argument.\n * @param {Function} callbacks.onCloseTag Callback function to call when a close\n *   tag is parsed. Called with the tagName as its argument. If a self-closing\n *   tag is found, `onCloseTag` is called immediately after `onOpenTag`.\n * @param {Function} callbacks.onText Callback function to call when text (i.e\n *   not an HTML tag) is parsed. Called with the text (string) as its first\n *   argument, and offset (number) into the string as its second.\n */\n\nexport function parseHtml(html, _a) {\n  var onOpenTag = _a.onOpenTag,\n      onCloseTag = _a.onCloseTag,\n      onText = _a.onText,\n      onComment = _a.onComment,\n      onDoctype = _a.onDoctype;\n  var noCurrentTag = new CurrentTag();\n  var charIdx = 0,\n      len = html.length,\n      state = 0\n  /* Data */\n  ,\n      currentDataIdx = 0,\n      // where the current data start index is\n  currentTag = noCurrentTag; // describes the current tag that is being read\n  // For debugging: search for other \"For debugging\" lines\n  // const table = new CliTable( {\n  // \thead: [ 'charIdx', 'char', 'state', 'currentDataIdx', 'currentOpenTagIdx', 'tag.type' ]\n  // } );\n\n  while (charIdx < len) {\n    var char = html.charAt(charIdx); // For debugging: search for other \"For debugging\" lines\n    // ALSO: Temporarily remove the 'const' keyword on the State enum\n    // table.push( \n    // \t[ charIdx, char, State[ state ], currentDataIdx, currentTag.idx, currentTag.idx === -1 ? '' : currentTag.type ] \n    // );\n\n    switch (state) {\n      case 0\n      /* Data */\n      :\n        stateData(char);\n        break;\n\n      case 1\n      /* TagOpen */\n      :\n        stateTagOpen(char);\n        break;\n\n      case 2\n      /* EndTagOpen */\n      :\n        stateEndTagOpen(char);\n        break;\n\n      case 3\n      /* TagName */\n      :\n        stateTagName(char);\n        break;\n\n      case 4\n      /* BeforeAttributeName */\n      :\n        stateBeforeAttributeName(char);\n        break;\n\n      case 5\n      /* AttributeName */\n      :\n        stateAttributeName(char);\n        break;\n\n      case 6\n      /* AfterAttributeName */\n      :\n        stateAfterAttributeName(char);\n        break;\n\n      case 7\n      /* BeforeAttributeValue */\n      :\n        stateBeforeAttributeValue(char);\n        break;\n\n      case 8\n      /* AttributeValueDoubleQuoted */\n      :\n        stateAttributeValueDoubleQuoted(char);\n        break;\n\n      case 9\n      /* AttributeValueSingleQuoted */\n      :\n        stateAttributeValueSingleQuoted(char);\n        break;\n\n      case 10\n      /* AttributeValueUnquoted */\n      :\n        stateAttributeValueUnquoted(char);\n        break;\n\n      case 11\n      /* AfterAttributeValueQuoted */\n      :\n        stateAfterAttributeValueQuoted(char);\n        break;\n\n      case 12\n      /* SelfClosingStartTag */\n      :\n        stateSelfClosingStartTag(char);\n        break;\n\n      case 13\n      /* MarkupDeclarationOpenState */\n      :\n        stateMarkupDeclarationOpen(char);\n        break;\n\n      case 14\n      /* CommentStart */\n      :\n        stateCommentStart(char);\n        break;\n\n      case 15\n      /* CommentStartDash */\n      :\n        stateCommentStartDash(char);\n        break;\n\n      case 16\n      /* Comment */\n      :\n        stateComment(char);\n        break;\n\n      case 17\n      /* CommentEndDash */\n      :\n        stateCommentEndDash(char);\n        break;\n\n      case 18\n      /* CommentEnd */\n      :\n        stateCommentEnd(char);\n        break;\n\n      case 19\n      /* CommentEndBang */\n      :\n        stateCommentEndBang(char);\n        break;\n\n      case 20\n      /* Doctype */\n      :\n        stateDoctype(char);\n        break;\n\n      default:\n        throwUnhandledCaseError(state);\n    } // For debugging: search for other \"For debugging\" lines\n    // ALSO: Temporarily remove the 'const' keyword on the State enum\n    // table.push( \n    // \t[ charIdx, char, State[ state ], currentDataIdx, currentTag.idx, currentTag.idx === -1 ? '' : currentTag.type ] \n    // );\n\n\n    charIdx++;\n  }\n\n  if (currentDataIdx < charIdx) {\n    emitText();\n  } // For debugging: search for other \"For debugging\" lines\n  // console.log( '\\n' + table.toString() );\n  // Called when non-tags are being read (i.e. the text around HTML â€ ags)\n  // https://www.w3.org/TR/html51/syntax.html#data-state\n\n\n  function stateData(char) {\n    if (char === '<') {\n      startNewTag();\n    }\n  } // Called after a '<' is read from the Data state\n  // https://www.w3.org/TR/html51/syntax.html#tag-open-state\n\n\n  function stateTagOpen(char) {\n    if (char === '!') {\n      state = 13\n      /* MarkupDeclarationOpenState */\n      ;\n    } else if (char === '/') {\n      state = 2\n      /* EndTagOpen */\n      ;\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        isClosing: true\n      }));\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (letterRe.test(char)) {\n      // tag name start (and no '/' read)\n      state = 3\n      /* TagName */\n      ;\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        isOpening: true\n      }));\n    } else {\n      // Any other \n      state = 0\n      /* Data */\n      ;\n      currentTag = noCurrentTag;\n    }\n  } // After a '<x', '</x' sequence is read (where 'x' is a letter character), \n  // this is to continue reading the tag name\n  // https://www.w3.org/TR/html51/syntax.html#tag-name-state\n\n\n  function stateTagName(char) {\n    if (whitespaceRe.test(char)) {\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        name: captureTagName()\n      }));\n      state = 4\n      /* BeforeAttributeName */\n      ;\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (char === '/') {\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        name: captureTagName()\n      }));\n      state = 12\n      /* SelfClosingStartTag */\n      ;\n    } else if (char === '>') {\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        name: captureTagName()\n      }));\n      emitTagAndPreviousTextNode(); // resets to Data state as well\n    } else if (!letterRe.test(char) && !digitRe.test(char) && char !== ':') {\n      // Anything else that does not form an html tag. Note: the colon \n      // character is accepted for XML namespaced tags\n      resetToDataState();\n    } else {// continue reading tag name\n    }\n  } // Called after the '/' is read from a '</' sequence\n  // https://www.w3.org/TR/html51/syntax.html#end-tag-open-state\n\n\n  function stateEndTagOpen(char) {\n    if (char === '>') {\n      // parse error. Encountered \"</>\". Skip it without treating as a tag\n      resetToDataState();\n    } else if (letterRe.test(char)) {\n      state = 3\n      /* TagName */\n      ;\n    } else {\n      // some other non-tag-like character, don't treat this as a tag\n      resetToDataState();\n    }\n  } // https://www.w3.org/TR/html51/syntax.html#before-attribute-name-state\n\n\n  function stateBeforeAttributeName(char) {\n    if (whitespaceRe.test(char)) {// stay in BeforeAttributeName state - continue reading chars\n    } else if (char === '/') {\n      state = 12\n      /* SelfClosingStartTag */\n      ;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode(); // resets to Data state as well\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (char === \"=\" || quoteRe.test(char) || controlCharsRe.test(char)) {\n      // \"Parse error\" characters that, according to the spec, should be\n      // appended to the attribute name, but we'll treat these characters\n      // as not forming a real HTML tag\n      resetToDataState();\n    } else {\n      // Any other char, start of a new attribute name\n      state = 5\n      /* AttributeName */\n      ;\n    }\n  } // https://www.w3.org/TR/html51/syntax.html#attribute-name-state\n\n\n  function stateAttributeName(char) {\n    if (whitespaceRe.test(char)) {\n      state = 6\n      /* AfterAttributeName */\n      ;\n    } else if (char === '/') {\n      state = 12\n      /* SelfClosingStartTag */\n      ;\n    } else if (char === '=') {\n      state = 7\n      /* BeforeAttributeValue */\n      ;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode(); // resets to Data state as well\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (quoteRe.test(char)) {\n      // \"Parse error\" characters that, according to the spec, should be\n      // appended to the attribute name, but we'll treat these characters\n      // as not forming a real HTML tag\n      resetToDataState();\n    } else {// anything else: continue reading attribute name\n    }\n  } // https://www.w3.org/TR/html51/syntax.html#after-attribute-name-state\n\n\n  function stateAfterAttributeName(char) {\n    if (whitespaceRe.test(char)) {// ignore the character - continue reading\n    } else if (char === '/') {\n      state = 12\n      /* SelfClosingStartTag */\n      ;\n    } else if (char === '=') {\n      state = 7\n      /* BeforeAttributeValue */\n      ;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (quoteRe.test(char)) {\n      // \"Parse error\" characters that, according to the spec, should be\n      // appended to the attribute name, but we'll treat these characters\n      // as not forming a real HTML tag\n      resetToDataState();\n    } else {\n      // Any other character, start a new attribute in the current tag\n      state = 5\n      /* AttributeName */\n      ;\n    }\n  } // https://www.w3.org/TR/html51/syntax.html#before-attribute-value-state\n\n\n  function stateBeforeAttributeValue(char) {\n    if (whitespaceRe.test(char)) {// ignore the character - continue reading\n    } else if (char === \"\\\"\") {\n      state = 8\n      /* AttributeValueDoubleQuoted */\n      ;\n    } else if (char === \"'\") {\n      state = 9\n      /* AttributeValueSingleQuoted */\n      ;\n    } else if (/[>=`]/.test(char)) {\n      // Invalid chars after an '=' for an attribute value, don't count \n      // the current tag as an HTML tag\n      resetToDataState();\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else {\n      // Any other character, consider it an unquoted attribute value\n      state = 10\n      /* AttributeValueUnquoted */\n      ;\n    }\n  } // https://www.w3.org/TR/html51/syntax.html#attribute-value-double-quoted-state\n\n\n  function stateAttributeValueDoubleQuoted(char) {\n    if (char === \"\\\"\") {\n      // end the current double-quoted attribute\n      state = 11\n      /* AfterAttributeValueQuoted */\n      ;\n    } else {// consume the character as part of the double-quoted attribute value\n      }\n  } // https://www.w3.org/TR/html51/syntax.html#attribute-value-single-quoted-state\n\n\n  function stateAttributeValueSingleQuoted(char) {\n    if (char === \"'\") {\n      // end the current single-quoted attribute\n      state = 11\n      /* AfterAttributeValueQuoted */\n      ;\n    } else {// consume the character as part of the double-quoted attribute value\n      }\n  } // https://www.w3.org/TR/html51/syntax.html#attribute-value-unquoted-state\n\n\n  function stateAttributeValueUnquoted(char) {\n    if (whitespaceRe.test(char)) {\n      state = 4\n      /* BeforeAttributeName */\n      ;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else {// Any other character, treat it as part of the attribute value\n    }\n  } // https://www.w3.org/TR/html51/syntax.html#after-attribute-value-quoted-state\n\n\n  function stateAfterAttributeValueQuoted(char) {\n    if (whitespaceRe.test(char)) {\n      state = 4\n      /* BeforeAttributeName */\n      ;\n    } else if (char === '/') {\n      state = 12\n      /* SelfClosingStartTag */\n      ;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else {\n      // Any other character, \"parse error\". Spec says to switch to the\n      // BeforeAttributeState and re-consume the character, as it may be\n      // the start of a new attribute name\n      state = 4\n      /* BeforeAttributeName */\n      ;\n      reconsumeCurrentCharacter();\n    }\n  } // A '/' has just been read in the current tag (presumably for '/>'), and \n  // this handles the next character\n  // https://www.w3.org/TR/html51/syntax.html#self-closing-start-tag-state\n\n\n  function stateSelfClosingStartTag(char) {\n    if (char === '>') {\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        isClosing: true\n      }));\n      emitTagAndPreviousTextNode(); // resets to Data state as well\n    } else {\n      state = 4\n      /* BeforeAttributeName */\n      ;\n    }\n  } // https://www.w3.org/TR/html51/syntax.html#markup-declaration-open-state\n  // (HTML Comments or !DOCTYPE)\n\n\n  function stateMarkupDeclarationOpen(char) {\n    if (html.substr(charIdx, 2) === '--') {\n      // html comment\n      charIdx += 2; // \"consume\" characters\n\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        type: 'comment'\n      }));\n      state = 14\n      /* CommentStart */\n      ;\n    } else if (html.substr(charIdx, 7).toUpperCase() === 'DOCTYPE') {\n      charIdx += 7; // \"consume\" characters\n\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        type: 'doctype'\n      }));\n      state = 20\n      /* Doctype */\n      ;\n    } else {\n      // At this point, the spec specifies that the state machine should\n      // enter the \"bogus comment\" state, in which case any character(s) \n      // after the '<!' that were read should become an HTML comment up\n      // until the first '>' that is read (or EOF). Instead, we'll assume\n      // that a user just typed '<!' as part of text data\n      resetToDataState();\n    }\n  } // Handles after the sequence '<!--' has been read\n  // https://www.w3.org/TR/html51/syntax.html#comment-start-state\n\n\n  function stateCommentStart(char) {\n    if (char === '-') {\n      // We've read the sequence '<!---' at this point (3 dashes)\n      state = 15\n      /* CommentStartDash */\n      ;\n    } else if (char === '>') {\n      // At this point, we'll assume the comment wasn't a real comment\n      // so we'll just emit it as data. We basically read the sequence \n      // '<!-->'\n      resetToDataState();\n    } else {\n      // Any other char, take it as part of the comment\n      state = 16\n      /* Comment */\n      ;\n    }\n  } // We've read the sequence '<!---' at this point (3 dashes)\n  // https://www.w3.org/TR/html51/syntax.html#comment-start-dash-state\n\n\n  function stateCommentStartDash(char) {\n    if (char === '-') {\n      // We've read '<!----' (4 dashes) at this point\n      state = 18\n      /* CommentEnd */\n      ;\n    } else if (char === '>') {\n      // At this point, we'll assume the comment wasn't a real comment\n      // so we'll just emit it as data. We basically read the sequence \n      // '<!--->'\n      resetToDataState();\n    } else {\n      // Anything else, take it as a valid comment\n      state = 16\n      /* Comment */\n      ;\n    }\n  } // Currently reading the comment's text (data)\n  // https://www.w3.org/TR/html51/syntax.html#comment-state\n\n\n  function stateComment(char) {\n    if (char === '-') {\n      state = 17\n      /* CommentEndDash */\n      ;\n    } else {// Any other character, stay in the Comment state\n      }\n  } // When we we've read the first dash inside a comment, it may signal the\n  // end of the comment if we read another dash\n  // https://www.w3.org/TR/html51/syntax.html#comment-end-dash-state\n\n\n  function stateCommentEndDash(char) {\n    if (char === '-') {\n      state = 18\n      /* CommentEnd */\n      ;\n    } else {\n      // Wasn't a dash, must still be part of the comment\n      state = 16\n      /* Comment */\n      ;\n    }\n  } // After we've read two dashes inside a comment, it may signal the end of \n  // the comment if we then read a '>' char\n  // https://www.w3.org/TR/html51/syntax.html#comment-end-state\n\n\n  function stateCommentEnd(char) {\n    if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '!') {\n      state = 19\n      /* CommentEndBang */\n      ;\n    } else if (char === '-') {// A 3rd '-' has been read: stay in the CommentEnd state\n    } else {\n      // Anything else, switch back to the comment state since we didn't\n      // read the full \"end comment\" sequence (i.e. '-->')\n      state = 16\n      /* Comment */\n      ;\n    }\n  } // We've read the sequence '--!' inside of a comment\n  // https://www.w3.org/TR/html51/syntax.html#comment-end-bang-state\n\n\n  function stateCommentEndBang(char) {\n    if (char === '-') {\n      // We read the sequence '--!-' inside of a comment. The last dash\n      // could signify that the comment is going to close\n      state = 17\n      /* CommentEndDash */\n      ;\n    } else if (char === '>') {\n      // End of comment with the sequence '--!>'\n      emitTagAndPreviousTextNode();\n    } else {\n      // The '--!' was not followed by a '>', continue reading the \n      // comment's text\n      state = 16\n      /* Comment */\n      ;\n    }\n  }\n  /**\n   * For DOCTYPES in particular, we don't care about the attributes. Just\n   * advance to the '>' character and emit the tag, unless we find a '<'\n   * character in which case we'll start a new tag.\n   *\n   * Example doctype tag:\n   *    <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n   *\n   * Actual spec: https://www.w3.org/TR/html51/syntax.html#doctype-state\n   */\n\n\n  function stateDoctype(char) {\n    if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '<') {\n      startNewTag();\n    } else {// stay in the Doctype state\n    }\n  }\n  /**\n   * Resets the state back to the Data state, and removes the current tag.\n   *\n   * We'll generally run this function whenever a \"parse error\" is\n   * encountered, where the current tag that is being read no longer looks\n   * like a real HTML tag.\n   */\n\n\n  function resetToDataState() {\n    state = 0\n    /* Data */\n    ;\n    currentTag = noCurrentTag;\n  }\n  /**\n   * Starts a new HTML tag at the current index, ignoring any previous HTML\n   * tag that was being read.\n   *\n   * We'll generally run this function whenever we read a new '<' character,\n   * including when we read a '<' character inside of an HTML tag that we were\n   * previously reading.\n   */\n\n\n  function startNewTag() {\n    state = 1\n    /* TagOpen */\n    ;\n    currentTag = new CurrentTag({\n      idx: charIdx\n    });\n  }\n  /**\n   * Once we've decided to emit an open tag, that means we can also emit the\n   * text node before it.\n   */\n\n\n  function emitTagAndPreviousTextNode() {\n    var textBeforeTag = html.slice(currentDataIdx, currentTag.idx);\n\n    if (textBeforeTag) {\n      // the html tag was the first element in the html string, or two \n      // tags next to each other, in which case we should not emit a text \n      // node\n      onText(textBeforeTag, currentDataIdx);\n    }\n\n    if (currentTag.type === 'comment') {\n      onComment(currentTag.idx);\n    } else if (currentTag.type === 'doctype') {\n      onDoctype(currentTag.idx);\n    } else {\n      if (currentTag.isOpening) {\n        onOpenTag(currentTag.name, currentTag.idx);\n      }\n\n      if (currentTag.isClosing) {\n        // note: self-closing tags will emit both opening and closing\n        onCloseTag(currentTag.name, currentTag.idx);\n      }\n    } // Since we just emitted a tag, reset to the data state for the next char\n\n\n    resetToDataState();\n    currentDataIdx = charIdx + 1;\n  }\n\n  function emitText() {\n    var text = html.slice(currentDataIdx, charIdx);\n    onText(text, currentDataIdx);\n    currentDataIdx = charIdx + 1;\n  }\n  /**\n   * Captures the tag name from the start of the tag to the current character\n   * index, and converts it to lower case\n   */\n\n\n  function captureTagName() {\n    var startIdx = currentTag.idx + (currentTag.isClosing ? 2 : 1);\n    return html.slice(startIdx, charIdx).toLowerCase();\n  }\n  /**\n   * Causes the main loop to re-consume the current character, such as after\n   * encountering a \"parse error\" that changed state and needs to reconsume\n   * the same character in that new state.\n   */\n\n\n  function reconsumeCurrentCharacter() {\n    charIdx--;\n  }\n}\n\nvar CurrentTag =\n/** @class */\nfunction () {\n  function CurrentTag(cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n\n    this.idx = cfg.idx !== undefined ? cfg.idx : -1;\n    this.type = cfg.type || 'tag';\n    this.name = cfg.name || '';\n    this.isOpening = !!cfg.isOpening;\n    this.isClosing = !!cfg.isClosing;\n  }\n\n  return CurrentTag;\n}();","map":null,"metadata":{},"sourceType":"module"}