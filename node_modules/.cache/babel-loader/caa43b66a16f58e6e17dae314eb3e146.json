{"ast":null,"code":"/* eslint no-eq-null: 0, eqeqeq: 0, no-unused-vars: 0 */\n\"use strict\";\n\nvar customError = require(\"es5-ext/error/custom\"),\n    defineLength = require(\"es5-ext/function/_define-length\"),\n    d = require(\"d\"),\n    ee = require(\"event-emitter\").methods,\n    resolveResolve = require(\"./resolve-resolve\"),\n    resolveNormalize = require(\"./resolve-normalize\");\n\nvar apply = Function.prototype.apply,\n    call = Function.prototype.call,\n    create = Object.create,\n    defineProperties = Object.defineProperties,\n    _on = ee.on,\n    emit = ee.emit;\n\nmodule.exports = function (original, length, options) {\n  var cache = create(null),\n      conf,\n      memLength,\n      _get,\n      set,\n      del,\n      _clear,\n      extDel,\n      extGet,\n      extHas,\n      normalizer,\n      getListeners,\n      setListeners,\n      deleteListeners,\n      memoized,\n      resolve;\n\n  if (length !== false) memLength = length;else if (isNaN(original.length)) memLength = 1;else memLength = original.length;\n\n  if (options.normalizer) {\n    normalizer = resolveNormalize(options.normalizer);\n    _get = normalizer.get;\n    set = normalizer.set;\n    del = normalizer.delete;\n    _clear = normalizer.clear;\n  }\n\n  if (options.resolvers != null) resolve = resolveResolve(options.resolvers);\n\n  if (_get) {\n    memoized = defineLength(function (arg) {\n      var id,\n          result,\n          args = arguments;\n      if (resolve) args = resolve(args);\n      id = _get(args);\n\n      if (id !== null) {\n        if (hasOwnProperty.call(cache, id)) {\n          if (getListeners) conf.emit(\"get\", id, args, this);\n          return cache[id];\n        }\n      }\n\n      if (args.length === 1) result = call.call(original, this, args[0]);else result = apply.call(original, this, args);\n\n      if (id === null) {\n        id = _get(args);\n        if (id !== null) throw customError(\"Circular invocation\", \"CIRCULAR_INVOCATION\");\n        id = set(args);\n      } else if (hasOwnProperty.call(cache, id)) {\n        throw customError(\"Circular invocation\", \"CIRCULAR_INVOCATION\");\n      }\n\n      cache[id] = result;\n      if (setListeners) conf.emit(\"set\", id, null, result);\n      return result;\n    }, memLength);\n  } else if (length === 0) {\n    memoized = function memoized() {\n      var result;\n\n      if (hasOwnProperty.call(cache, \"data\")) {\n        if (getListeners) conf.emit(\"get\", \"data\", arguments, this);\n        return cache.data;\n      }\n\n      if (arguments.length) result = apply.call(original, this, arguments);else result = call.call(original, this);\n\n      if (hasOwnProperty.call(cache, \"data\")) {\n        throw customError(\"Circular invocation\", \"CIRCULAR_INVOCATION\");\n      }\n\n      cache.data = result;\n      if (setListeners) conf.emit(\"set\", \"data\", null, result);\n      return result;\n    };\n  } else {\n    memoized = function memoized(arg) {\n      var result,\n          args = arguments,\n          id;\n      if (resolve) args = resolve(arguments);\n      id = String(args[0]);\n\n      if (hasOwnProperty.call(cache, id)) {\n        if (getListeners) conf.emit(\"get\", id, args, this);\n        return cache[id];\n      }\n\n      if (args.length === 1) result = call.call(original, this, args[0]);else result = apply.call(original, this, args);\n\n      if (hasOwnProperty.call(cache, id)) {\n        throw customError(\"Circular invocation\", \"CIRCULAR_INVOCATION\");\n      }\n\n      cache[id] = result;\n      if (setListeners) conf.emit(\"set\", id, null, result);\n      return result;\n    };\n  }\n\n  conf = {\n    original: original,\n    memoized: memoized,\n    profileName: options.profileName,\n    get: function get(args) {\n      if (resolve) args = resolve(args);\n      if (_get) return _get(args);\n      return String(args[0]);\n    },\n    has: function has(id) {\n      return hasOwnProperty.call(cache, id);\n    },\n    delete: function _delete(id) {\n      var result;\n      if (!hasOwnProperty.call(cache, id)) return;\n      if (del) del(id);\n      result = cache[id];\n      delete cache[id];\n      if (deleteListeners) conf.emit(\"delete\", id, result);\n    },\n    clear: function clear() {\n      var oldCache = cache;\n      if (_clear) _clear();\n      cache = create(null);\n      conf.emit(\"clear\", oldCache);\n    },\n    on: function on(type, listener) {\n      if (type === \"get\") getListeners = true;else if (type === \"set\") setListeners = true;else if (type === \"delete\") deleteListeners = true;\n      return _on.call(this, type, listener);\n    },\n    emit: emit,\n    updateEnv: function updateEnv() {\n      original = conf.original;\n    }\n  };\n\n  if (_get) {\n    extDel = defineLength(function (arg) {\n      var id,\n          args = arguments;\n      if (resolve) args = resolve(args);\n      id = _get(args);\n      if (id === null) return;\n      conf.delete(id);\n    }, memLength);\n  } else if (length === 0) {\n    extDel = function extDel() {\n      return conf.delete(\"data\");\n    };\n  } else {\n    extDel = function extDel(arg) {\n      if (resolve) arg = resolve(arguments)[0];\n      return conf.delete(arg);\n    };\n  }\n\n  extGet = defineLength(function () {\n    var id,\n        args = arguments;\n    if (length === 0) return cache.data;\n    if (resolve) args = resolve(args);\n    if (_get) id = _get(args);else id = String(args[0]);\n    return cache[id];\n  });\n  extHas = defineLength(function () {\n    var id,\n        args = arguments;\n    if (length === 0) return conf.has(\"data\");\n    if (resolve) args = resolve(args);\n    if (_get) id = _get(args);else id = String(args[0]);\n    if (id === null) return false;\n    return conf.has(id);\n  });\n  defineProperties(memoized, {\n    __memoized__: d(true),\n    delete: d(extDel),\n    clear: d(conf.clear),\n    _get: d(extGet),\n    _has: d(extHas)\n  });\n  return conf;\n};","map":null,"metadata":{},"sourceType":"script"}