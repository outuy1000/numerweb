{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport ResizeObserver from 'rc-resize-observer';\nexport default function Item(props) {\n  var prefixCls = props.prefixCls,\n      item = props.item,\n      renderItem = props.renderItem,\n      responsive = props.responsive,\n      registerSize = props.registerSize,\n      itemKey = props.itemKey,\n      className = props.className,\n      style = props.style,\n      children = props.children,\n      display = props.display,\n      order = props.order;\n  var mergedHidden = responsive && !display; // ================================ Effect ================================\n\n  function internalRegisterSize(width) {\n    registerSize(itemKey, width);\n  }\n\n  React.useEffect(function () {\n    return function () {\n      internalRegisterSize(null);\n    };\n  }, []); // ================================ Render ================================\n\n  var childNode = item !== undefined ? renderItem(item) : children;\n  var itemNode = /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(prefixCls, className),\n    style: _objectSpread({\n      opacity: mergedHidden ? 0.2 : 1,\n      height: mergedHidden ? 0 : undefined,\n      overflowY: mergedHidden ? 'hidden' : undefined,\n      order: responsive ? order : undefined,\n      pointerEvents: mergedHidden ? 'none' : undefined\n    }, style)\n  }, childNode);\n\n  if (responsive) {\n    itemNode = /*#__PURE__*/React.createElement(ResizeObserver, {\n      onResize: function onResize(_ref) {\n        var offsetWidth = _ref.offsetWidth;\n        internalRegisterSize(offsetWidth);\n      }\n    }, itemNode);\n  }\n\n  return itemNode;\n}","map":null,"metadata":{},"sourceType":"module"}