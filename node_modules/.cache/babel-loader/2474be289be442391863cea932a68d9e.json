{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Matcher } from \"./matcher\";\nimport { alphaNumericAndMarksCharsStr } from \"../regex-lib\";\nimport { MentionMatch } from \"../match/mention-match\"; // RegExp objects which are shared by all instances of MentionMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating MentionMatcher and its RegExp \n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314). \n// See descriptions of the properties where they are used for details about them\n\nvar twitterRegex = new RegExp(\"@[_\" + alphaNumericAndMarksCharsStr + \"]{1,50}(?![_\" + alphaNumericAndMarksCharsStr + \"])\", 'g'); // lookahead used to make sure we don't match something above 50 characters\n\nvar instagramRegex = new RegExp(\"@[_.\" + alphaNumericAndMarksCharsStr + \"]{1,30}(?![_\" + alphaNumericAndMarksCharsStr + \"])\", 'g'); // lookahead used to make sure we don't match something above 30 characters\n\nvar soundcloudRegex = new RegExp(\"@[-_.\" + alphaNumericAndMarksCharsStr + \"]{1,50}(?![-_\" + alphaNumericAndMarksCharsStr + \"])\", 'g'); // lookahead used to make sure we don't match something above 50 characters\n\nvar nonWordCharRegex = new RegExp('[^' + alphaNumericAndMarksCharsStr + ']');\n/**\n * @class Autolinker.matcher.Mention\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find/replace username matches in an input string.\n */\n\nvar MentionMatcher =\n/** @class */\nfunction (_super) {\n  __extends(MentionMatcher, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match instance,\n   *   specified in an Object (map).\n   */\n\n\n  function MentionMatcher(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @cfg {'twitter'/'instagram'/'soundcloud'} protected\n     *\n     * The name of service to link @mentions to.\n     *\n     * Valid values are: 'twitter', 'instagram', or 'soundcloud'\n     */\n\n\n    _this.serviceName = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * Hash of regular expression to match username handles. Example match:\n     *\n     *     @asdf\n     *\n     * @private\n     * @property {Object} matcherRegexes\n     */\n\n    _this.matcherRegexes = {\n      'twitter': twitterRegex,\n      'instagram': instagramRegex,\n      'soundcloud': soundcloudRegex\n    };\n    /**\n     * The regular expression to use to check the character before a username match to\n     * make sure we didn't accidentally match an email address.\n     *\n     * For example, the string \"asdf@asdf.com\" should not match \"@asdf\" as a username.\n     *\n     * @private\n     * @property {RegExp} nonWordCharRegex\n     */\n\n    _this.nonWordCharRegex = nonWordCharRegex;\n    _this.serviceName = cfg.serviceName;\n    return _this;\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  MentionMatcher.prototype.parseMatches = function (text) {\n    var serviceName = this.serviceName,\n        matcherRegex = this.matcherRegexes[this.serviceName],\n        nonWordCharRegex = this.nonWordCharRegex,\n        tagBuilder = this.tagBuilder,\n        matches = [],\n        match;\n\n    if (!matcherRegex) {\n      return matches;\n    }\n\n    while ((match = matcherRegex.exec(text)) !== null) {\n      var offset = match.index,\n          prevChar = text.charAt(offset - 1); // If we found the match at the beginning of the string, or we found the match\n      // and there is a whitespace char in front of it (meaning it is not an email\n      // address), then it is a username match.\n\n      if (offset === 0 || nonWordCharRegex.test(prevChar)) {\n        var matchedText = match[0].replace(/\\.+$/g, ''),\n            // strip off trailing .\n        mention = matchedText.slice(1); // strip off the '@' character at the beginning\n\n        matches.push(new MentionMatch({\n          tagBuilder: tagBuilder,\n          matchedText: matchedText,\n          offset: offset,\n          serviceName: serviceName,\n          mention: mention\n        }));\n      }\n    }\n\n    return matches;\n  };\n\n  return MentionMatcher;\n}(Matcher);\n\nexport { MentionMatcher };","map":{"version":3,"sources":["../src/matcher/mention-matcher.ts"],"names":[],"mappings":"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","sourcesContent":["import { Matcher, MatcherConfig } from \"./matcher\";\nimport { alphaNumericAndMarksCharsStr } from \"../regex-lib\";\nimport { MentionServices } from \"../autolinker\";\nimport { MentionMatch } from \"../match/mention-match\";\nimport { Match } from \"../match/match\";\n\n// RegExp objects which are shared by all instances of MentionMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating MentionMatcher and its RegExp \n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314). \n// See descriptions of the properties where they are used for details about them\nconst twitterRegex = new RegExp( `@[_${alphaNumericAndMarksCharsStr}]{1,50}(?![_${alphaNumericAndMarksCharsStr}])`, 'g' );  // lookahead used to make sure we don't match something above 50 characters\nconst instagramRegex = new RegExp( `@[_.${alphaNumericAndMarksCharsStr}]{1,30}(?![_${alphaNumericAndMarksCharsStr}])`, 'g' );  // lookahead used to make sure we don't match something above 30 characters\nconst soundcloudRegex = new RegExp( `@[-_.${alphaNumericAndMarksCharsStr}]{1,50}(?![-_${alphaNumericAndMarksCharsStr}])`, 'g' );  // lookahead used to make sure we don't match something above 50 characters\nconst nonWordCharRegex = new RegExp( '[^' + alphaNumericAndMarksCharsStr + ']' );\n\n/**\n * @class Autolinker.matcher.Mention\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find/replace username matches in an input string.\n */\nexport class MentionMatcher extends Matcher {\n\n\t/**\n\t * @cfg {'twitter'/'instagram'/'soundcloud'} protected\n\t * \n\t * The name of service to link @mentions to.\n\t * \n\t * Valid values are: 'twitter', 'instagram', or 'soundcloud'\n\t */\n\tprotected serviceName: MentionServices = 'twitter';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * Hash of regular expression to match username handles. Example match:\n\t *\n\t *     @asdf\n\t *\n\t * @private\n\t * @property {Object} matcherRegexes\n\t */\n\tprotected readonly matcherRegexes: {[key: string]: RegExp} = {\n\t\t'twitter': twitterRegex,\n\t\t'instagram': instagramRegex,\n\t\t'soundcloud': soundcloudRegex\n\t};\n\n\t/**\n\t * The regular expression to use to check the character before a username match to\n\t * make sure we didn't accidentally match an email address.\n\t *\n\t * For example, the string \"asdf@asdf.com\" should not match \"@asdf\" as a username.\n\t *\n\t * @private\n\t * @property {RegExp} nonWordCharRegex\n\t */\n\tprotected readonly nonWordCharRegex = nonWordCharRegex;\n\n\n\t/**\n\t * @method constructor\n\t * @param {Object} cfg The configuration properties for the Match instance,\n\t *   specified in an Object (map).\n\t */\n\tconstructor( cfg: MentionMatcherConfig ) {\n\t\tsuper( cfg );\n\n\t\tthis.serviceName = cfg.serviceName;\n\t}\n\n\n\t/**\n\t * @inheritdoc\n\t */\n\tparseMatches( text: string ) {\n\t\tlet serviceName = this.serviceName,\n\t\t    matcherRegex = this.matcherRegexes[ this.serviceName ],\n\t\t    nonWordCharRegex = this.nonWordCharRegex,\n\t\t    tagBuilder = this.tagBuilder,\n\t\t    matches: Match[] = [],\n\t\t    match: RegExpExecArray | null;\n\n\t\tif (!matcherRegex) {\n\t\t\treturn matches;\n\t\t}\n\n\t\twhile( ( match = matcherRegex.exec( text ) ) !== null ) {\n\t\t\tlet offset = match.index,\n\t\t\t    prevChar = text.charAt( offset - 1 );\n\n\t\t\t// If we found the match at the beginning of the string, or we found the match\n\t\t\t// and there is a whitespace char in front of it (meaning it is not an email\n\t\t\t// address), then it is a username match.\n\t\t\tif( offset === 0 || nonWordCharRegex.test( prevChar ) ) {\n\t\t\t\tlet matchedText = match[ 0 ].replace( /\\.+$/g, '' ), // strip off trailing .\n\t\t\t\t    mention = matchedText.slice( 1 );  // strip off the '@' character at the beginning\n\n\t\t\t\tmatches.push( new MentionMatch( {\n\t\t\t\t\ttagBuilder    : tagBuilder,\n\t\t\t\t\tmatchedText   : matchedText,\n\t\t\t\t\toffset        : offset,\n\t\t\t\t\tserviceName   : serviceName,\n\t\t\t\t\tmention       : mention\n\t\t\t\t} ) );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t}\n\n}\n\n\nexport interface MentionMatcherConfig extends MatcherConfig {\n\tserviceName: MentionServices\n}"]},"metadata":{},"sourceType":"module"}