{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Matcher } from \"./matcher\";\nimport { alphaNumericCharsStr, alphaNumericAndMarksCharsStr, getDomainNameStr } from \"../regex-lib\";\nimport { tldRegex } from \"./tld-regex\";\nimport { UrlMatch } from \"../match/url-match\";\nimport { UrlMatchValidator } from \"./url-match-validator\"; // RegExp objects which are shared by all instances of UrlMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating UrlMatcher and its RegExp \n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314). \n// See descriptions of the properties where they are used for details about them\n\nvar matcherRegex = function () {\n  var schemeRegex = /(?:[A-Za-z][-.+A-Za-z0-9]{0,63}:(?![A-Za-z][-.+A-Za-z0-9]{0,63}:\\/\\/)(?!\\d+\\/?)(?:\\/\\/)?)/,\n      // match protocol, allow in format \"http://\" or \"mailto:\". However, do not match the first part of something like 'link:http://www.google.com' (i.e. don't match \"link:\"). Also, make sure we don't interpret 'google.com:8000' as if 'google.com' was a protocol here (i.e. ignore a trailing port number in this regex)\n  wwwRegex = /(?:www\\.)/,\n      // starting with 'www.'\n  // Allow optional path, query string, and hash anchor, not ending in the following characters: \"?!:,.;\"\n  // http://blog.codinghorror.com/the-problem-with-urls/\n  urlSuffixRegex = new RegExp('[/?#](?:[' + alphaNumericAndMarksCharsStr + \"\\\\-+&@#/%=~_()|'$*\\\\[\\\\]{}?!:,.;^\\u2713]*[\" + alphaNumericAndMarksCharsStr + \"\\\\-+&@#/%=~_()|'$*\\\\[\\\\]{}\\u2713])?\");\n  return new RegExp(['(?:', '(', schemeRegex.source, getDomainNameStr(2), ')', '|', '(', '(//)?', wwwRegex.source, getDomainNameStr(6), ')', '|', '(', '(//)?', getDomainNameStr(10) + '\\\\.', tldRegex.source, '(?![-' + alphaNumericCharsStr + '])', ')', ')', '(?::[0-9]+)?', '(?:' + urlSuffixRegex.source + ')?' // match for path, query string, and/or hash anchor - optional\n  ].join(\"\"), 'gi');\n}();\n\nvar wordCharRegExp = new RegExp('[' + alphaNumericAndMarksCharsStr + ']');\n/**\n * @class Autolinker.matcher.Url\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find URL matches in an input string.\n *\n * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more details.\n */\n\nvar UrlMatcher =\n/** @class */\nfunction (_super) {\n  __extends(UrlMatcher, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match instance,\n   *   specified in an Object (map).\n   */\n\n\n  function UrlMatcher(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @cfg {Object} stripPrefix (required)\n     *\n     * The Object form of {@link Autolinker#cfg-stripPrefix}.\n     */\n\n\n    _this.stripPrefix = {\n      scheme: true,\n      www: true\n    }; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} stripTrailingSlash (required)\n     * @inheritdoc Autolinker#stripTrailingSlash\n     */\n\n    _this.stripTrailingSlash = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} decodePercentEncoding (required)\n     * @inheritdoc Autolinker#decodePercentEncoding\n     */\n\n    _this.decodePercentEncoding = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @protected\n     * @property {RegExp} matcherRegex\n     *\n     * The regular expression to match URLs with an optional scheme, port\n     * number, path, query string, and hash anchor.\n     *\n     * Example matches:\n     *\n     *     http://google.com\n     *     www.google.com\n     *     google.com/path/to/file?q1=1&q2=2#myAnchor\n     *\n     *\n     * This regular expression will have the following capturing groups:\n     *\n     * 1.  Group that matches a scheme-prefixed URL (i.e. 'http://google.com').\n     *     This is used to match scheme URLs with just a single word, such as\n     *     'http://localhost', where we won't double check that the domain name\n     *     has at least one dot ('.') in it.\n     * 2.  Group that matches a 'www.' prefixed URL. This is only matched if the\n     *     'www.' text was not prefixed by a scheme (i.e.: not prefixed by\n     *     'http://', 'ftp:', etc.)\n     * 3.  A protocol-relative ('//') match for the case of a 'www.' prefixed\n     *     URL. Will be an empty string if it is not a protocol-relative match.\n     *     We need to know the character before the '//' in order to determine\n     *     if it is a valid match or the // was in a string we don't want to\n     *     auto-link.\n     * 4.  Group that matches a known TLD (top level domain), when a scheme\n     *     or 'www.'-prefixed domain is not matched.\n     * 5.  A protocol-relative ('//') match for the case of a known TLD prefixed\n     *     URL. Will be an empty string if it is not a protocol-relative match.\n     *     See #3 for more info.\n     */\n\n    _this.matcherRegex = matcherRegex;\n    /**\n     * A regular expression to use to check the character before a protocol-relative\n     * URL match. We don't want to match a protocol-relative URL if it is part\n     * of another word.\n     *\n     * For example, we want to match something like \"Go to: //google.com\",\n     * but we don't want to match something like \"abc//google.com\"\n     *\n     * This regular expression is used to test the character before the '//'.\n     *\n     * @protected\n     * @type {RegExp} wordCharRegExp\n     */\n\n    _this.wordCharRegExp = wordCharRegExp;\n    _this.stripPrefix = cfg.stripPrefix;\n    _this.stripTrailingSlash = cfg.stripTrailingSlash;\n    _this.decodePercentEncoding = cfg.decodePercentEncoding;\n    return _this;\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  UrlMatcher.prototype.parseMatches = function (text) {\n    var matcherRegex = this.matcherRegex,\n        stripPrefix = this.stripPrefix,\n        stripTrailingSlash = this.stripTrailingSlash,\n        decodePercentEncoding = this.decodePercentEncoding,\n        tagBuilder = this.tagBuilder,\n        matches = [],\n        match;\n\n    var _loop_1 = function _loop_1() {\n      var matchStr = match[0],\n          schemeUrlMatch = match[1],\n          wwwUrlMatch = match[4],\n          wwwProtocolRelativeMatch = match[5],\n          //tldUrlMatch = match[ 8 ],  -- not needed at the moment\n      tldProtocolRelativeMatch = match[9],\n          offset = match.index,\n          protocolRelativeMatch = wwwProtocolRelativeMatch || tldProtocolRelativeMatch,\n          prevChar = text.charAt(offset - 1);\n\n      if (!UrlMatchValidator.isValid(matchStr, schemeUrlMatch)) {\n        return \"continue\";\n      } // If the match is preceded by an '@' character, then it is either\n      // an email address or a username. Skip these types of matches.\n\n\n      if (offset > 0 && prevChar === '@') {\n        return \"continue\";\n      } // If it's a protocol-relative '//' match, but the character before the '//'\n      // was a word character (i.e. a letter/number), then we found the '//' in the\n      // middle of another word (such as \"asdf//asdf.com\"). In this case, skip the\n      // match.\n\n\n      if (offset > 0 && protocolRelativeMatch && this_1.wordCharRegExp.test(prevChar)) {\n        return \"continue\";\n      } // If the URL ends with a question mark, don't include the question\n      // mark as part of the URL. We'll assume the question mark was the\n      // end of a sentence, such as: \"Going to google.com?\"\n\n\n      if (/\\?$/.test(matchStr)) {\n        matchStr = matchStr.substr(0, matchStr.length - 1);\n      } // Handle a closing parenthesis or square bracket at the end of the \n      // match, and exclude it if there is not a matching open parenthesis \n      // or square bracket in the match itself.\n\n\n      if (this_1.matchHasUnbalancedClosingParen(matchStr)) {\n        matchStr = matchStr.substr(0, matchStr.length - 1); // remove the trailing \")\"\n      } else {\n        // Handle an invalid character after the TLD\n        var pos = this_1.matchHasInvalidCharAfterTld(matchStr, schemeUrlMatch);\n\n        if (pos > -1) {\n          matchStr = matchStr.substr(0, pos); // remove the trailing invalid chars\n        }\n      } // The autolinker accepts many characters in a url's scheme (like `fake://test.com`).\n      // However, in cases where a URL is missing whitespace before an obvious link,\n      // (for example: `nowhitespacehttp://www.test.com`), we only want the match to start\n      // at the http:// part. We will check if the match contains a common scheme and then \n      // shift the match to start from there. \t\t\n\n\n      var foundCommonScheme = ['http://', 'https://'].find(function (commonScheme) {\n        return !!schemeUrlMatch && schemeUrlMatch.indexOf(commonScheme) !== -1;\n      });\n\n      if (foundCommonScheme) {\n        // If we found an overmatched URL, we want to find the index\n        // of where the match should start and shift the match to\n        // start from the beginning of the common scheme\n        var indexOfSchemeStart = matchStr.indexOf(foundCommonScheme);\n        matchStr = matchStr.substr(indexOfSchemeStart);\n        schemeUrlMatch = schemeUrlMatch.substr(indexOfSchemeStart);\n        offset = offset + indexOfSchemeStart;\n      }\n\n      var urlMatchType = schemeUrlMatch ? 'scheme' : wwwUrlMatch ? 'www' : 'tld',\n          protocolUrlMatch = !!schemeUrlMatch;\n      matches.push(new UrlMatch({\n        tagBuilder: tagBuilder,\n        matchedText: matchStr,\n        offset: offset,\n        urlMatchType: urlMatchType,\n        url: matchStr,\n        protocolUrlMatch: protocolUrlMatch,\n        protocolRelativeMatch: !!protocolRelativeMatch,\n        stripPrefix: stripPrefix,\n        stripTrailingSlash: stripTrailingSlash,\n        decodePercentEncoding: decodePercentEncoding\n      }));\n    };\n\n    var this_1 = this;\n\n    while ((match = matcherRegex.exec(text)) !== null) {\n      _loop_1();\n    }\n\n    return matches;\n  };\n  /**\n   * Determines if a match found has an unmatched closing parenthesis,\n   * square bracket or curly bracket. If so, the symbol will be removed\n   * from the match itself, and appended after the generated anchor tag.\n   *\n   * A match may have an extra closing parenthesis at the end of the match\n   * because the regular expression must include parenthesis for URLs such as\n   * \"wikipedia.com/something_(disambiguation)\", which should be auto-linked.\n   *\n   * However, an extra parenthesis *will* be included when the URL itself is\n   * wrapped in parenthesis, such as in the case of:\n   *     \"(wikipedia.com/something_(disambiguation))\"\n   * In this case, the last closing parenthesis should *not* be part of the\n   * URL itself, and this method will return `true`.\n   *\n   * For square brackets in URLs such as in PHP arrays, the same behavior as\n   * parenthesis discussed above should happen:\n   *     \"[http://www.example.com/foo.php?bar[]=1&bar[]=2&bar[]=3]\"\n   * The closing square bracket should not be part of the URL itself, and this\n   * method will return `true`.\n   *\n   * @protected\n   * @param {String} matchStr The full match string from the {@link #matcherRegex}.\n   * @return {Boolean} `true` if there is an unbalanced closing parenthesis or\n   *   square bracket at the end of the `matchStr`, `false` otherwise.\n   */\n\n\n  UrlMatcher.prototype.matchHasUnbalancedClosingParen = function (matchStr) {\n    var endChar = matchStr.charAt(matchStr.length - 1);\n    var startChar;\n\n    if (endChar === ')') {\n      startChar = '(';\n    } else if (endChar === ']') {\n      startChar = '[';\n    } else if (endChar === '}') {\n      startChar = '{';\n    } else {\n      return false; // not a close parenthesis or square bracket\n    } // Find if there are the same number of open braces as close braces in\n    // the URL string, minus the last character (which we have already \n    // determined to be either ')', ']' or '}'\n\n\n    var numOpenBraces = 0;\n\n    for (var i = 0, len = matchStr.length - 1; i < len; i++) {\n      var char = matchStr.charAt(i);\n\n      if (char === startChar) {\n        numOpenBraces++;\n      } else if (char === endChar) {\n        numOpenBraces = Math.max(numOpenBraces - 1, 0);\n      }\n    } // If the number of open braces matches the number of close braces in\n    // the URL minus the last character, then the match has *unbalanced*\n    // braces because of the last character. Example of unbalanced braces\n    // from the regex match:\n    //     \"http://example.com?a[]=1]\"\n\n\n    if (numOpenBraces === 0) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Determine if there's an invalid character after the TLD in a URL. Valid\n   * characters after TLD are ':/?#'. Exclude scheme matched URLs from this\n   * check.\n   *\n   * @protected\n   * @param {String} urlMatch The matched URL, if there was one. Will be an\n   *   empty string if the match is not a URL match.\n   * @param {String} schemeUrlMatch The match URL string for a scheme\n   *   match. Ex: 'http://yahoo.com'. This is used to match something like\n   *   'http://localhost', where we won't double check that the domain name\n   *   has at least one '.' in it.\n   * @return {Number} the position where the invalid character was found. If\n   *   no such character was found, returns -1\n   */\n\n\n  UrlMatcher.prototype.matchHasInvalidCharAfterTld = function (urlMatch, schemeUrlMatch) {\n    if (!urlMatch) {\n      return -1;\n    }\n\n    var offset = 0;\n\n    if (schemeUrlMatch) {\n      offset = urlMatch.indexOf(':');\n      urlMatch = urlMatch.slice(offset);\n    }\n\n    var re = new RegExp(\"^((.?\\/\\/)?[-.\" + alphaNumericAndMarksCharsStr + \"]*[-\" + alphaNumericAndMarksCharsStr + \"]\\\\.[-\" + alphaNumericAndMarksCharsStr + \"]+)\");\n    var res = re.exec(urlMatch);\n\n    if (res === null) {\n      return -1;\n    }\n\n    offset += res[1].length;\n    urlMatch = urlMatch.slice(res[1].length);\n\n    if (/^[^-.A-Za-z0-9:\\/?#]/.test(urlMatch)) {\n      return offset;\n    }\n\n    return -1;\n  };\n\n  return UrlMatcher;\n}(Matcher);\n\nexport { UrlMatcher };","map":null,"metadata":{},"sourceType":"module"}