{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Matcher } from \"./matcher\";\nimport { alphaNumericAndMarksCharsStr } from \"../regex-lib\";\nimport { HashtagMatch } from \"../match/hashtag-match\"; // RegExp objects which are shared by all instances of HashtagMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating HashtagMatcher and its RegExp \n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314). \n// See descriptions of the properties where they are used for details about them\n\nvar matcherRegex = new RegExp(\"#[_\" + alphaNumericAndMarksCharsStr + \"]{1,139}(?![_\" + alphaNumericAndMarksCharsStr + \"])\", 'g'); // lookahead used to make sure we don't match something above 139 characters\n\nvar nonWordCharRegex = new RegExp('[^' + alphaNumericAndMarksCharsStr + ']');\n/**\n * @class Autolinker.matcher.Hashtag\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find HashtagMatch matches in an input string.\n */\n\nvar HashtagMatcher =\n/** @class */\nfunction (_super) {\n  __extends(HashtagMatcher, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match instance,\n   *   specified in an Object (map).\n   */\n\n\n  function HashtagMatcher(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @cfg {String} serviceName\n     *\n     * The service to point hashtag matches to. See {@link Autolinker#hashtag}\n     * for available values.\n     */\n\n\n    _this.serviceName = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * The regular expression to match Hashtags. Example match:\n     *\n     *     #asdf\n     *\n     * @protected\n     * @property {RegExp} matcherRegex\n     */\n\n    _this.matcherRegex = matcherRegex;\n    /**\n     * The regular expression to use to check the character before a username match to\n     * make sure we didn't accidentally match an email address.\n     *\n     * For example, the string \"asdf@asdf.com\" should not match \"@asdf\" as a username.\n     *\n     * @protected\n     * @property {RegExp} nonWordCharRegex\n     */\n\n    _this.nonWordCharRegex = nonWordCharRegex;\n    _this.serviceName = cfg.serviceName;\n    return _this;\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  HashtagMatcher.prototype.parseMatches = function (text) {\n    var matcherRegex = this.matcherRegex,\n        nonWordCharRegex = this.nonWordCharRegex,\n        serviceName = this.serviceName,\n        tagBuilder = this.tagBuilder,\n        matches = [],\n        match;\n\n    while ((match = matcherRegex.exec(text)) !== null) {\n      var offset = match.index,\n          prevChar = text.charAt(offset - 1); // If we found the match at the beginning of the string, or we found the match\n      // and there is a whitespace char in front of it (meaning it is not a '#' char\n      // in the middle of a word), then it is a hashtag match.\n\n      if (offset === 0 || nonWordCharRegex.test(prevChar)) {\n        var matchedText = match[0],\n            hashtag = match[0].slice(1); // strip off the '#' character at the beginning\n\n        matches.push(new HashtagMatch({\n          tagBuilder: tagBuilder,\n          matchedText: matchedText,\n          offset: offset,\n          serviceName: serviceName,\n          hashtag: hashtag\n        }));\n      }\n    }\n\n    return matches;\n  };\n\n  return HashtagMatcher;\n}(Matcher);\n\nexport { HashtagMatcher };","map":{"version":3,"sources":["../src/matcher/hashtag-matcher.ts"],"names":[],"mappings":";AAAA,SAAS,OAAT,QAAuC,WAAvC;AAEA,SAAS,4BAAT,QAA6C,cAA7C;AACA,SAAS,YAAT,QAA6B,wBAA7B,C,CAGA;AACA;AACA;AACA;AACA;;AACA,IAAM,YAAY,GAAG,IAAI,MAAJ,CAAY,QAAM,4BAAN,GAAkC,eAAlC,GAAkD,4BAAlD,GAA8E,IAA1F,EAAgG,GAAhG,CAArB,C,CAA6H;;AAC7H,IAAM,gBAAgB,GAAG,IAAI,MAAJ,CAAY,OAAO,4BAAP,GAAsC,GAAlD,CAAzB;AAEA;;;;;AAKG;;AACH,IAAA,cAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAoC,EAAA,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;AAgCnC;;;;AAIG;;;AACH,WAAA,cAAA,CAAa,GAAb,EAAsC;AAAtC,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAO,GAAP,KAAY,IADb;AAnCA;;;;;AAKG;;;AACgB,IAAA,KAAA,CAAA,WAAA,GAA+B,SAA/B,CA6BmB,CA7BwB;;AAE9D;;;;;;;AAOG;;AACO,IAAA,KAAA,CAAA,YAAA,GAAe,YAAf;AAEV;;;;;;;;AAQG;;AACO,IAAA,KAAA,CAAA,gBAAA,GAAmB,gBAAnB;AAWT,IAAA,KAAI,CAAC,WAAL,GAAmB,GAAG,CAAC,WAAvB;;AACA;AAGD;;AAEG;;;AACH,EAAA,cAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAc,IAAd,EAA0B;AACzB,QAAI,YAAY,GAAG,KAAK,YAAxB;AAAA,QACI,gBAAgB,GAAG,KAAK,gBAD5B;AAAA,QAEI,WAAW,GAAG,KAAK,WAFvB;AAAA,QAGI,UAAU,GAAG,KAAK,UAHtB;AAAA,QAII,OAAO,GAAY,EAJvB;AAAA,QAKI,KALJ;;AAOA,WAAO,CAAE,KAAK,GAAG,YAAY,CAAC,IAAb,CAAmB,IAAnB,CAAV,MAA0C,IAAjD,EAAwD;AACvD,UAAI,MAAM,GAAG,KAAK,CAAC,KAAnB;AAAA,UACI,QAAQ,GAAG,IAAI,CAAC,MAAL,CAAa,MAAM,GAAG,CAAtB,CADf,CADuD,CAIvD;AACA;AACA;;AACA,UAAI,MAAM,KAAK,CAAX,IAAgB,gBAAgB,CAAC,IAAjB,CAAuB,QAAvB,CAApB,EAAwD;AACvD,YAAI,WAAW,GAAG,KAAK,CAAE,CAAF,CAAvB;AAAA,YACI,OAAO,GAAG,KAAK,CAAE,CAAF,CAAL,CAAW,KAAX,CAAkB,CAAlB,CADd,CADuD,CAEjB;;AAEtC,QAAA,OAAO,CAAC,IAAR,CAAc,IAAI,YAAJ,CAAkB;AAC/B,UAAA,UAAU,EAAI,UADiB;AAE/B,UAAA,WAAW,EAAG,WAFiB;AAG/B,UAAA,MAAM,EAAQ,MAHiB;AAI/B,UAAA,WAAW,EAAG,WAJiB;AAK/B,UAAA,OAAO,EAAO;AALiB,SAAlB,CAAd;AAOA;AACD;;AAED,WAAO,OAAP;AACA,GA9BD;;AAgCD,SAAA,cAAA;AAAC,CA/ED,CAAoC,OAApC,CAAA","sourcesContent":["import { Matcher, MatcherConfig } from \"./matcher\";\nimport { HashtagServices } from \"../autolinker\";\nimport { alphaNumericAndMarksCharsStr } from \"../regex-lib\";\nimport { HashtagMatch } from \"../match/hashtag-match\";\nimport { Match } from \"../match/match\";\n\n// RegExp objects which are shared by all instances of HashtagMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating HashtagMatcher and its RegExp \n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314). \n// See descriptions of the properties where they are used for details about them\nconst matcherRegex = new RegExp( `#[_${alphaNumericAndMarksCharsStr}]{1,139}(?![_${alphaNumericAndMarksCharsStr}])`, 'g' );  // lookahead used to make sure we don't match something above 139 characters\nconst nonWordCharRegex = new RegExp( '[^' + alphaNumericAndMarksCharsStr + ']' );\n\n/**\n * @class Autolinker.matcher.Hashtag\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find HashtagMatch matches in an input string.\n */\nexport class HashtagMatcher extends Matcher {\n\n\t/**\n\t * @cfg {String} serviceName\n\t *\n\t * The service to point hashtag matches to. See {@link Autolinker#hashtag}\n\t * for available values.\n\t */\n\tprotected readonly serviceName: HashtagServices = 'twitter';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * The regular expression to match Hashtags. Example match:\n\t *\n\t *     #asdf\n\t *\n\t * @protected\n\t * @property {RegExp} matcherRegex\n\t */\n\tprotected matcherRegex = matcherRegex;\n\n\t/**\n\t * The regular expression to use to check the character before a username match to\n\t * make sure we didn't accidentally match an email address.\n\t *\n\t * For example, the string \"asdf@asdf.com\" should not match \"@asdf\" as a username.\n\t *\n\t * @protected\n\t * @property {RegExp} nonWordCharRegex\n\t */\n\tprotected nonWordCharRegex = nonWordCharRegex;\n\n\n\t/**\n\t * @method constructor\n\t * @param {Object} cfg The configuration properties for the Match instance,\n\t *   specified in an Object (map).\n\t */\n\tconstructor( cfg: HashtagMatcherConfig ) {\n\t\tsuper( cfg );\n\n\t\tthis.serviceName = cfg.serviceName;\n\t}\n\n\n\t/**\n\t * @inheritdoc\n\t */\n\tparseMatches( text: string ) {\n\t\tlet matcherRegex = this.matcherRegex,\n\t\t    nonWordCharRegex = this.nonWordCharRegex,\n\t\t    serviceName = this.serviceName,\n\t\t    tagBuilder = this.tagBuilder,\n\t\t    matches: Match[] = [],\n\t\t    match: RegExpExecArray | null;\n\n\t\twhile( ( match = matcherRegex.exec( text ) ) !== null ) {\n\t\t\tlet offset = match.index,\n\t\t\t    prevChar = text.charAt( offset - 1 );\n\n\t\t\t// If we found the match at the beginning of the string, or we found the match\n\t\t\t// and there is a whitespace char in front of it (meaning it is not a '#' char\n\t\t\t// in the middle of a word), then it is a hashtag match.\n\t\t\tif( offset === 0 || nonWordCharRegex.test( prevChar ) ) {\n\t\t\t\tlet matchedText = match[ 0 ],\n\t\t\t\t    hashtag = match[ 0 ].slice( 1 );  // strip off the '#' character at the beginning\n\n\t\t\t\tmatches.push( new HashtagMatch( {\n\t\t\t\t\ttagBuilder  : tagBuilder,\n\t\t\t\t\tmatchedText : matchedText,\n\t\t\t\t\toffset      : offset,\n\t\t\t\t\tserviceName : serviceName,\n\t\t\t\t\thashtag     : hashtag\n\t\t\t\t} ) );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t}\n\n}\n\nexport interface HashtagMatcherConfig extends MatcherConfig {\n\tserviceName: HashtagServices\n}"]},"metadata":{},"sourceType":"module"}