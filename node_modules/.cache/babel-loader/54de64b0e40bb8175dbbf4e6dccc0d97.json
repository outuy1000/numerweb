{"ast":null,"code":"/**\n * Date: 2015-10-05\n * Author: Kasper SÃ¸fren <soefritz@gmail.com> (https://github.com/kafoso)\n *\n * A truncation feature, where the ellipsis will be placed at a section within\n * the URL making it still somewhat human readable.\n *\n * @param {String} url\t\t\t\t\t\t A URL.\n * @param {Number} truncateLen\t\t The maximum length of the truncated output URL string.\n * @param {String} ellipsisChars\t The characters to place within the url, e.g. \"...\".\n * @return {String} The truncated URL.\n */\nexport function truncateSmart(url, truncateLen, ellipsisChars) {\n  var ellipsisLengthBeforeParsing;\n  var ellipsisLength;\n\n  if (ellipsisChars == null) {\n    ellipsisChars = '&hellip;';\n    ellipsisLength = 3;\n    ellipsisLengthBeforeParsing = 8;\n  } else {\n    ellipsisLength = ellipsisChars.length;\n    ellipsisLengthBeforeParsing = ellipsisChars.length;\n  }\n\n  var parse_url = function parse_url(url) {\n    var urlObj = {};\n    var urlSub = url;\n    var match = urlSub.match(/^([a-z]+):\\/\\//i);\n\n    if (match) {\n      urlObj.scheme = match[1];\n      urlSub = urlSub.substr(match[0].length);\n    }\n\n    match = urlSub.match(/^(.*?)(?=(\\?|#|\\/|$))/i);\n\n    if (match) {\n      urlObj.host = match[1];\n      urlSub = urlSub.substr(match[0].length);\n    }\n\n    match = urlSub.match(/^\\/(.*?)(?=(\\?|#|$))/i);\n\n    if (match) {\n      urlObj.path = match[1];\n      urlSub = urlSub.substr(match[0].length);\n    }\n\n    match = urlSub.match(/^\\?(.*?)(?=(#|$))/i);\n\n    if (match) {\n      urlObj.query = match[1];\n      urlSub = urlSub.substr(match[0].length);\n    }\n\n    match = urlSub.match(/^#(.*?)$/i);\n\n    if (match) {\n      urlObj.fragment = match[1]; //urlSub = urlSub.substr(match[0].length);  -- not used. Uncomment if adding another block.\n    }\n\n    return urlObj;\n  };\n\n  var buildUrl = function buildUrl(urlObj) {\n    var url = \"\";\n\n    if (urlObj.scheme && urlObj.host) {\n      url += urlObj.scheme + \"://\";\n    }\n\n    if (urlObj.host) {\n      url += urlObj.host;\n    }\n\n    if (urlObj.path) {\n      url += \"/\" + urlObj.path;\n    }\n\n    if (urlObj.query) {\n      url += \"?\" + urlObj.query;\n    }\n\n    if (urlObj.fragment) {\n      url += \"#\" + urlObj.fragment;\n    }\n\n    return url;\n  };\n\n  var buildSegment = function buildSegment(segment, remainingAvailableLength) {\n    var remainingAvailableLengthHalf = remainingAvailableLength / 2,\n        startOffset = Math.ceil(remainingAvailableLengthHalf),\n        endOffset = -1 * Math.floor(remainingAvailableLengthHalf),\n        end = \"\";\n\n    if (endOffset < 0) {\n      end = segment.substr(endOffset);\n    }\n\n    return segment.substr(0, startOffset) + ellipsisChars + end;\n  };\n\n  if (url.length <= truncateLen) {\n    return url;\n  }\n\n  var availableLength = truncateLen - ellipsisLength;\n  var urlObj = parse_url(url); // Clean up the URL\n\n  if (urlObj.query) {\n    var matchQuery = urlObj.query.match(/^(.*?)(?=(\\?|\\#))(.*?)$/i);\n\n    if (matchQuery) {\n      // Malformed URL; two or more \"?\". Removed any content behind the 2nd.\n      urlObj.query = urlObj.query.substr(0, matchQuery[1].length);\n      url = buildUrl(urlObj);\n    }\n  }\n\n  if (url.length <= truncateLen) {\n    return url;\n  }\n\n  if (urlObj.host) {\n    urlObj.host = urlObj.host.replace(/^www\\./, \"\");\n    url = buildUrl(urlObj);\n  }\n\n  if (url.length <= truncateLen) {\n    return url;\n  } // Process and build the URL\n\n\n  var str = \"\";\n\n  if (urlObj.host) {\n    str += urlObj.host;\n  }\n\n  if (str.length >= availableLength) {\n    if (urlObj.host.length == truncateLen) {\n      return (urlObj.host.substr(0, truncateLen - ellipsisLength) + ellipsisChars).substr(0, availableLength + ellipsisLengthBeforeParsing);\n    }\n\n    return buildSegment(str, availableLength).substr(0, availableLength + ellipsisLengthBeforeParsing);\n  }\n\n  var pathAndQuery = \"\";\n\n  if (urlObj.path) {\n    pathAndQuery += \"/\" + urlObj.path;\n  }\n\n  if (urlObj.query) {\n    pathAndQuery += \"?\" + urlObj.query;\n  }\n\n  if (pathAndQuery) {\n    if ((str + pathAndQuery).length >= availableLength) {\n      if ((str + pathAndQuery).length == truncateLen) {\n        return (str + pathAndQuery).substr(0, truncateLen);\n      }\n\n      var remainingAvailableLength = availableLength - str.length;\n      return (str + buildSegment(pathAndQuery, remainingAvailableLength)).substr(0, availableLength + ellipsisLengthBeforeParsing);\n    } else {\n      str += pathAndQuery;\n    }\n  }\n\n  if (urlObj.fragment) {\n    var fragment = \"#\" + urlObj.fragment;\n\n    if ((str + fragment).length >= availableLength) {\n      if ((str + fragment).length == truncateLen) {\n        return (str + fragment).substr(0, truncateLen);\n      }\n\n      var remainingAvailableLength2 = availableLength - str.length;\n      return (str + buildSegment(fragment, remainingAvailableLength2)).substr(0, availableLength + ellipsisLengthBeforeParsing);\n    } else {\n      str += fragment;\n    }\n  }\n\n  if (urlObj.scheme && urlObj.host) {\n    var scheme = urlObj.scheme + \"://\";\n\n    if ((str + scheme).length < availableLength) {\n      return (scheme + str).substr(0, truncateLen);\n    }\n  }\n\n  if (str.length <= truncateLen) {\n    return str;\n  }\n\n  var end = \"\";\n\n  if (availableLength > 0) {\n    end = str.substr(-1 * Math.floor(availableLength / 2));\n  }\n\n  return (str.substr(0, Math.ceil(availableLength / 2)) + ellipsisChars + end).substr(0, availableLength + ellipsisLengthBeforeParsing);\n}","map":null,"metadata":{},"sourceType":"module"}